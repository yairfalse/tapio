apiVersion: apps/v1
kind: Deployment
metadata:
  name: memory-leak-test
  namespace: tapio-ebpf-tests
  labels:
    test-type: memory-leak
    app: tapio-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memory-leak-test
  template:
    metadata:
      labels:
        app: memory-leak-test
        test-type: memory-leak
    spec:
      containers:
      - name: memory-leaker
        image: python:3.9-slim
        command: ["python", "-c"]
        args:
          - |
            import time
            import gc
            
            print("üß™ Starting controlled memory leak test...")
            print("üìä This will leak 10MB every 30 seconds")
            
            leaked_data = []
            iteration = 0
            
            while True:
                iteration += 1
                
                # Allocate 10MB of data and don't release it
                leak_chunk = bytearray(10 * 1024 * 1024)  # 10MB
                for i in range(len(leak_chunk)):
                    leak_chunk[i] = i % 256
                
                leaked_data.append(leak_chunk)
                
                total_leaked = len(leaked_data) * 10
                print(f"‚ö†Ô∏è  Iteration {iteration}: Leaked {total_leaked}MB total")
                print(f"üìà Growth rate: ~10MB per 30 seconds")
                
                # Disable garbage collection to ensure leak
                gc.disable()
                
                time.sleep(30)
        resources:
          requests:
            memory: "50Mi"
            cpu: "100m"
          limits:
            memory: "500Mi"  # Will OOM after ~50 iterations (25 minutes)
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: memory-leak-test-svc
  namespace: tapio-ebpf-tests
spec:
  selector:
    app: memory-leak-test
  ports:
  - port: 8080
    targetPort: 8080