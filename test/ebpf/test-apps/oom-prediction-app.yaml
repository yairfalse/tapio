apiVersion: apps/v1
kind: Deployment
metadata:
  name: oom-prediction-test
  namespace: tapio-ebpf-tests
  labels:
    test-type: oom-prediction
    app: tapio-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oom-prediction-test
  template:
    metadata:
      labels:
        app: oom-prediction-test
        test-type: oom-prediction
    spec:
      containers:
      - name: oom-predictor
        image: python:3.9-slim
        command: ["python", "-c"]
        args:
          - |
            import time
            import os
            import psutil
            
            print("🎯 Starting OOM prediction test...")
            print("📊 Target: Hit 128Mi limit in exactly 5 minutes")
            print("⏱️  Growth rate: ~25.6MB per minute")
            
            # Calculate precise allocation to hit OOM in 5 minutes
            target_memory_mb = 128  # 128Mi limit
            target_minutes = 5
            chunks_per_minute = 12  # Every 5 seconds
            mb_per_chunk = target_memory_mb / (target_minutes * chunks_per_minute)
            
            print(f"📈 Allocating {mb_per_chunk:.2f}MB every 5 seconds")
            
            allocated_chunks = []
            start_time = time.time()
            
            iteration = 0
            while True:
                iteration += 1
                elapsed_minutes = (time.time() - start_time) / 60
                
                # Allocate calculated chunk size
                chunk_size = int(mb_per_chunk * 1024 * 1024)  # Convert to bytes
                chunk = bytearray(chunk_size)
                
                # Fill with data to ensure real memory usage
                for i in range(0, len(chunk), 4096):
                    chunk[i] = iteration % 256
                
                allocated_chunks.append(chunk)
                
                # Calculate metrics
                total_allocated_mb = len(allocated_chunks) * mb_per_chunk
                estimated_oom_minutes = target_minutes - elapsed_minutes
                
                # Get actual memory usage
                process = psutil.Process(os.getpid())
                actual_memory_mb = process.memory_info().rss / 1024 / 1024
                
                print(f"🔍 Iteration {iteration}:")
                print(f"   ⏱️  Elapsed: {elapsed_minutes:.1f} minutes")
                print(f"   📊 Allocated: {total_allocated_mb:.1f}MB")
                print(f"   💾 Actual RSS: {actual_memory_mb:.1f}MB")
                print(f"   ⏰ Est. OOM in: {estimated_oom_minutes:.1f} minutes")
                print(f"   📈 Growth rate: {actual_memory_mb/elapsed_minutes:.1f}MB/min" if elapsed_minutes > 0 else "")
                
                if elapsed_minutes >= target_minutes:
                    print("🎯 Target time reached - should OOM soon!")
                
                time.sleep(5)  # 5 second intervals
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"  # Will OOM in exactly 5 minutes
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: oom-prediction-test-svc
  namespace: tapio-ebpf-tests
spec:
  selector:
    app: oom-prediction-test
  ports:
  - port: 8080