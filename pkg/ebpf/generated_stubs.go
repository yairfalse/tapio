//go:build linux && ebpf
// +build linux,ebpf

package ebpf

import (
	"github.com/cilium/ebpf"
)

// This file contains stubs for the generated eBPF types
// In production, these would be generated by bpf2go

// networkmonitorObjects contains all objects after they have been loaded into the kernel.
type networkmonitorObjects struct {
	networkmonitorPrograms
	networkmonitorMaps
}

type networkmonitorPrograms struct {
	TraceConnect     *ebpf.Program `ebpf:"tcp_v4_connect_entry"`
	TraceClose       *ebpf.Program `ebpf:"tcp_close"`
	TraceRetransmit  *ebpf.Program `ebpf:"tcp_retransmit_skb"`
	TracePacketDrop  *ebpf.Program `ebpf:"trace_kfree_skb"`
	TraceSendmsg     *ebpf.Program `ebpf:"trace_sendmsg"`
	TraceRecvmsg     *ebpf.Program `ebpf:"trace_recvmsg"`
}

type networkmonitorMaps struct {
	Events       *ebpf.Map `ebpf:"events"`
	Connections  *ebpf.Map `ebpf:"connections"`
	Stats        *ebpf.Map `ebpf:"stats"`
}

func (o *networkmonitorObjects) Close() error {
	// Close all programs and maps
	return nil
}

// packetanalyzerObjects contains all objects after they have been loaded into the kernel.
type packetanalyzerObjects struct {
	packetanalyzerPrograms
	packetanalyzerMaps
}

type packetanalyzerPrograms struct {
	XdpPacketParser *ebpf.Program `ebpf:"xdp_packet_parser"`
	TcEgress        *ebpf.Program `ebpf:"tc_egress"`
	TcIngress       *ebpf.Program `ebpf:"tc_ingress"`
}

type packetanalyzerMaps struct {
	Events      *ebpf.Map `ebpf:"events"`
	PacketStats *ebpf.Map `ebpf:"packet_stats"`
	FlowTable   *ebpf.Map `ebpf:"flow_table"`
}

func (o *packetanalyzerObjects) Close() error {
	// Close all programs and maps
	return nil
}

// dnsmonitorObjects contains all objects after they have been loaded into the kernel.
type dnsmonitorObjects struct {
	dnsmonitorPrograms
	dnsmonitorMaps
}

type dnsmonitorPrograms struct {
	TraceDnsQuery    *ebpf.Program `ebpf:"trace_dns_query"`
	TraceDnsResponse *ebpf.Program `ebpf:"trace_dns_response"`
}

type dnsmonitorMaps struct {
	Events     *ebpf.Map `ebpf:"events"`
	DnsQueries *ebpf.Map `ebpf:"dns_queries"`
	DnsStats   *ebpf.Map `ebpf:"dns_stats"`
}

func (o *dnsmonitorObjects) Close() error {
	// Close all programs and maps
	return nil
}

// protocolanalyzerObjects contains all objects after they have been loaded into the kernel.
type protocolanalyzerObjects struct {
	protocolanalyzerPrograms
	protocolanalyzerMaps
}

type protocolanalyzerPrograms struct {
	TraceHttpRequest  *ebpf.Program `ebpf:"trace_http_request"`
	TraceHttpResponse *ebpf.Program `ebpf:"trace_http_response"`
	TraceGrpc         *ebpf.Program `ebpf:"trace_grpc"`
	TraceMysql        *ebpf.Program `ebpf:"trace_mysql"`
	TraceRedis        *ebpf.Program `ebpf:"trace_redis"`
}

type protocolanalyzerMaps struct {
	Events        *ebpf.Map `ebpf:"events"`
	ProtocolStats *ebpf.Map `ebpf:"protocol_stats"`
	Requests      *ebpf.Map `ebpf:"requests"`
}

func (o *protocolanalyzerObjects) Close() error {
	// Close all programs and maps
	return nil
}

// Loader functions (would be generated by bpf2go)

func loadNetworkmonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	// In production, this would load the actual eBPF bytecode
	// For now, return nil to allow compilation
	return nil
}

func loadPacketanalyzerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	// In production, this would load the actual eBPF bytecode
	return nil
}

func loadDnsmonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	// In production, this would load the actual eBPF bytecode
	return nil
}

func loadProtocolanalyzerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	// In production, this would load the actual eBPF bytecode
	return nil
}