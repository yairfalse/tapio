// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/collector.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectorService_StreamEvents_FullMethodName      = "/tapio.collector.v1.CollectorService/StreamEvents"
	CollectorService_SendEventBatch_FullMethodName    = "/tapio.collector.v1.CollectorService/SendEventBatch"
	CollectorService_RegisterCollector_FullMethodName = "/tapio.collector.v1.CollectorService/RegisterCollector"
	CollectorService_Heartbeat_FullMethodName         = "/tapio.collector.v1.CollectorService/Heartbeat"
	CollectorService_GetServerInfo_FullMethodName     = "/tapio.collector.v1.CollectorService/GetServerInfo"
)

// CollectorServiceClient is the client API for CollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CollectorService defines the streaming communication between
// collectors and the Tapio server, optimized for high-throughput
// event streaming with backpressure and resilience.
type CollectorServiceClient interface {
	// StreamEvents establishes a bidirectional streaming connection
	// for real-time event delivery with flow control
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error)
	// SendEventBatch sends a batch of events in a single request
	// for scenarios where streaming is not required
	SendEventBatch(ctx context.Context, in *EventBatchRequest, opts ...grpc.CallOption) (*EventBatchResponse, error)
	// RegisterCollector registers a collector with the server
	// and returns configuration and routing information
	RegisterCollector(ctx context.Context, in *CollectorRegistration, opts ...grpc.CallOption) (*CollectorConfig, error)
	// Heartbeat maintains connection health and provides
	// real-time status updates
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HeartbeatRequest, HeartbeatResponse], error)
	// GetServerInfo returns server capabilities and configuration
	GetServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error)
}

type collectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorServiceClient(cc grpc.ClientConnInterface) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamRequest, StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CollectorService_ServiceDesc.Streams[0], CollectorService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorService_StreamEventsClient = grpc.BidiStreamingClient[StreamRequest, StreamResponse]

func (c *collectorServiceClient) SendEventBatch(ctx context.Context, in *EventBatchRequest, opts ...grpc.CallOption) (*EventBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventBatchResponse)
	err := c.cc.Invoke(ctx, CollectorService_SendEventBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) RegisterCollector(ctx context.Context, in *CollectorRegistration, opts ...grpc.CallOption) (*CollectorConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectorConfig)
	err := c.cc.Invoke(ctx, CollectorService_RegisterCollector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HeartbeatRequest, HeartbeatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CollectorService_ServiceDesc.Streams[1], CollectorService_Heartbeat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HeartbeatRequest, HeartbeatResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorService_HeartbeatClient = grpc.BidiStreamingClient[HeartbeatRequest, HeartbeatResponse]

func (c *collectorServiceClient) GetServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerInfoResponse)
	err := c.cc.Invoke(ctx, CollectorService_GetServerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServiceServer is the server API for CollectorService service.
// All implementations must embed UnimplementedCollectorServiceServer
// for forward compatibility.
//
// CollectorService defines the streaming communication between
// collectors and the Tapio server, optimized for high-throughput
// event streaming with backpressure and resilience.
type CollectorServiceServer interface {
	// StreamEvents establishes a bidirectional streaming connection
	// for real-time event delivery with flow control
	StreamEvents(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error
	// SendEventBatch sends a batch of events in a single request
	// for scenarios where streaming is not required
	SendEventBatch(context.Context, *EventBatchRequest) (*EventBatchResponse, error)
	// RegisterCollector registers a collector with the server
	// and returns configuration and routing information
	RegisterCollector(context.Context, *CollectorRegistration) (*CollectorConfig, error)
	// Heartbeat maintains connection health and provides
	// real-time status updates
	Heartbeat(grpc.BidiStreamingServer[HeartbeatRequest, HeartbeatResponse]) error
	// GetServerInfo returns server capabilities and configuration
	GetServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error)
	mustEmbedUnimplementedCollectorServiceServer()
}

// UnimplementedCollectorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectorServiceServer struct{}

func (UnimplementedCollectorServiceServer) StreamEvents(grpc.BidiStreamingServer[StreamRequest, StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedCollectorServiceServer) SendEventBatch(context.Context, *EventBatchRequest) (*EventBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEventBatch not implemented")
}
func (UnimplementedCollectorServiceServer) RegisterCollector(context.Context, *CollectorRegistration) (*CollectorConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCollector not implemented")
}
func (UnimplementedCollectorServiceServer) Heartbeat(grpc.BidiStreamingServer[HeartbeatRequest, HeartbeatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedCollectorServiceServer) GetServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedCollectorServiceServer) mustEmbedUnimplementedCollectorServiceServer() {}
func (UnimplementedCollectorServiceServer) testEmbeddedByValue()                          {}

// UnsafeCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServiceServer will
// result in compilation errors.
type UnsafeCollectorServiceServer interface {
	mustEmbedUnimplementedCollectorServiceServer()
}

func RegisterCollectorServiceServer(s grpc.ServiceRegistrar, srv CollectorServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollectorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectorService_ServiceDesc, srv)
}

func _CollectorService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServiceServer).StreamEvents(&grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorService_StreamEventsServer = grpc.BidiStreamingServer[StreamRequest, StreamResponse]

func _CollectorService_SendEventBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).SendEventBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_SendEventBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).SendEventBatch(ctx, req.(*EventBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_RegisterCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectorRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).RegisterCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_RegisterCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).RegisterCollector(ctx, req.(*CollectorRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServiceServer).Heartbeat(&grpc.GenericServerStream[HeartbeatRequest, HeartbeatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectorService_HeartbeatServer = grpc.BidiStreamingServer[HeartbeatRequest, HeartbeatResponse]

func _CollectorService_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorService_GetServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).GetServerInfo(ctx, req.(*ServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectorService_ServiceDesc is the grpc.ServiceDesc for CollectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tapio.collector.v1.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEventBatch",
			Handler:    _CollectorService_SendEventBatch_Handler,
		},
		{
			MethodName: "RegisterCollector",
			Handler:    _CollectorService_RegisterCollector_Handler,
		},
		{
			MethodName: "GetServerInfo",
			Handler:    _CollectorService_GetServerInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _CollectorService_StreamEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Heartbeat",
			Handler:       _CollectorService_Heartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/collector.proto",
}
