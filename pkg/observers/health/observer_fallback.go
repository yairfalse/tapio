//go:build !linux
// +build !linux

package health

import (
	"fmt"
	"time"

	"github.com/yairfalse/tapio/pkg/domain"
	"go.uber.org/zap"
)

// startEBPF is a no-op on non-Linux platforms
func (o *Observer) startEBPF() error {
	o.logger.Warn("Health observer requires Linux with eBPF support")

	// Start a mock event generator for testing
	o.LifecycleManager.Start("mock-generator", func() {
		o.generateMockEvents()
	})

	return nil
}

// stopEBPF is a no-op on non-Linux platforms
func (o *Observer) stopEBPF() {
	// Nothing to clean up
}

// readEvents is a no-op on non-Linux platforms
func (o *Observer) readEvents() {
	// Events are generated by mock generator
}

// getStatsImpl returns empty stats on non-Linux platforms
func (o *Observer) getStatsImpl() (*ObserverStats, error) {
	return &ObserverStats{}, nil
}

// generateMockEvents generates test events on non-Linux platforms
func (o *Observer) generateMockEvents() {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	eventCount := 0
	for {
		select {
		case <-o.LifecycleManager.Context().Done():
			return
		case <-ticker.C:
			eventCount++

			// Create a mock health event (disk space exhaustion)
			event := &domain.CollectorEvent{
				EventID:   fmt.Sprintf("mock-health-%d", eventCount),
				Timestamp: time.Now(),
				Type:      domain.EventTypeKernelSyscall,
				Source:    o.name,
				Severity:  domain.EventSeverityCritical,
				EventData: domain.EventDataContainer{
					Kernel: &domain.KernelData{
						EventType:    "health_issue",
						PID:          1234,
						PPID:         1,
						UID:          1000,
						GID:          1000,
						Command:      "mock-process",
						CgroupID:     999,
						Syscall:      "write",
						ReturnCode:   -28,
						ErrorMessage: "Disk space exhausted",
					},
					Custom: map[string]string{
						"mock":     "true",
						"platform": "non-linux",
					},
				},
				Metadata: domain.EventMetadata{
					Labels: map[string]string{
						"error_count": "1",
						"category":    "file",
						"path":        "/mock/path",
					},
				},
			}

			if o.EventChannelManager.SendEvent(event) {
				o.BaseObserver.RecordEvent()
				o.logger.Debug("Sent mock health event",
					zap.Int("count", eventCount))
			} else {
				o.BaseObserver.RecordDrop()
			}
		}
	}
}
