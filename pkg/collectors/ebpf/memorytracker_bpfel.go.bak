// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"sync"

	"github.com/cilium/ebpf"
)

var initOnce sync.Once

// memorytrackerSpecs contains maps and programs before they are loaded into the kernel.
type memorytrackerSpecs struct {
	memorytrackerProgramSpecs
	memorytrackerMapSpecs
}

// memorytrackerMapSpecs contains maps before they are loaded into the kernel.
type memorytrackerMapSpecs struct {
	Events             *ebpf.MapSpec `ebpf:"events"`
	MemoryAllocations  *ebpf.MapSpec `ebpf:"memory_allocations"`
	ProcessMemoryStats *ebpf.MapSpec `ebpf:"process_memory_stats"`
}

// memorytrackerProgramSpecs contains programs before they are loaded into the kernel.
type memorytrackerProgramSpecs struct {
	TraceMmPageAlloc      *ebpf.ProgramSpec `ebpf:"trace_mm_page_alloc"`
	TraceMmPageFree       *ebpf.ProgramSpec `ebpf:"trace_mm_page_free"`
	TraceOomKillProcess   *ebpf.ProgramSpec `ebpf:"trace_oom_kill_process"`
	TraceRssStatThrottled *ebpf.ProgramSpec `ebpf:"trace_rss_stat_throttled"`
}

// memorytrackerMaps contains all maps after they have been loaded into the kernel.
type memorytrackerMaps struct {
	Events             *ebpf.Map `ebpf:"events"`
	MemoryAllocations  *ebpf.Map `ebpf:"memory_allocations"`
	ProcessMemoryStats *ebpf.Map `ebpf:"process_memory_stats"`
}

// memorytrackerPrograms contains all programs after they have been loaded into the kernel.
type memorytrackerPrograms struct {
	TraceMmPageAlloc      *ebpf.Program `ebpf:"trace_mm_page_alloc"`
	TraceMmPageFree       *ebpf.Program `ebpf:"trace_mm_page_free"`
	TraceOomKillProcess   *ebpf.Program `ebpf:"trace_oom_kill_process"`
	TraceRssStatThrottled *ebpf.Program `ebpf:"trace_rss_stat_throttled"`
}

// memorytrackerObjects contains all objects after they have been loaded into the kernel.
type memorytrackerObjects struct {
	memorytrackerPrograms
	memorytrackerMaps
}

func (m *memorytrackerMaps) Close() error {
	return _memorytrackerClose(
		m.Events,
		m.MemoryAllocations,
		m.ProcessMemoryStats,
	)
}

func (p *memorytrackerPrograms) Close() error {
	return _memorytrackerClose(
		p.TraceMmPageAlloc,
		p.TraceMmPageFree,
		p.TraceOomKillProcess,
		p.TraceRssStatThrottled,
	)
}

func (o *memorytrackerObjects) Close() error {
	return _memorytrackerClose(
		&o.memorytrackerPrograms,
		&o.memorytrackerMaps,
	)
}

// loadMemorytracker returns the embedded CollectionSpec for memorytracker.
func loadMemorytracker() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MemorytrackerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load memorytracker: %w", err)
	}

	return spec, err
}

// loadMemorytrackerObjects loads memorytracker and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*memorytrackerObjects
//	*memorytrackerPrograms
//	*memorytrackerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMemorytrackerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMemorytracker()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// memorytrackerSpecs contains the parsed CollectionSpec.
var memorytrackerSpecs *memorytrackerSpecs

// memorytrackerProgramSpecs contains the parsed ProgramSpecs.
var memorytrackerProgramSpecs memorytrackerProgramSpecs

// memorytrackerMapSpecs contains the parsed MapSpecs.
var memorytrackerMapSpecs memorytrackerMapSpecs

// memorytrackerObjects contains all objects after they have been loaded.
var memorytrackerObjects memorytrackerObjects

func init() {
	initFunc := func() {
		spec, err := loadMemorytracker()
		if err != nil {
			panic(err)
		}

		memorytrackerSpecs = &memorytrackerSpecs{
			memorytrackerProgramSpecs: memorytrackerProgramSpecs{
				TraceMmPageAlloc:      spec.Programs["trace_mm_page_alloc"],
				TraceMmPageFree:       spec.Programs["trace_mm_page_free"],
				TraceOomKillProcess:   spec.Programs["trace_oom_kill_process"],
				TraceRssStatThrottled: spec.Programs["trace_rss_stat_throttled"],
			},
			memorytrackerMapSpecs: memorytrackerMapSpecs{
				Events:             spec.Maps["events"],
				MemoryAllocations:  spec.Maps["memory_allocations"],
				ProcessMemoryStats: spec.Maps["process_memory_stats"],
			},
		}

		memorytrackerProgramSpecs = memorytrackerSpecs.memorytrackerProgramSpecs
		memorytrackerMapSpecs = memorytrackerSpecs.memorytrackerMapSpecs
	}

	initOnce.Do(initFunc)
}

// Do not access this directly.
//
//go:embed memorytracker_bpfel.o
var _MemorytrackerBytes []byte

func _memorytrackerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}
