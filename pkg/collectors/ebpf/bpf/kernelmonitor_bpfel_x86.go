// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type kernelmonitorContainerInfo struct {
	ContainerId [64]int8
	PodUid      [36]int8
	Image       [128]int8
	StartedAt   uint64
}

type kernelmonitorDnsQueryInfo struct {
	ServiceName [64]int8
	Namespace   [64]int8
	ResolvedIp  uint32
	Port        uint16
	Pad         [2]uint8
}

type kernelmonitorMountInfo struct {
	Name      [64]int8
	Namespace [64]int8
	MountPath [128]int8
	IsSecret  uint8
	Pad       [7]uint8
}

type kernelmonitorPodInfo struct {
	PodUid    [36]int8
	Namespace [64]int8
	PodName   [128]int8
	CreatedAt uint64
}

type kernelmonitorProcessLineage struct {
	Pid       uint32
	Ppid      uint32
	Tgid      uint32
	StartTime uint64
	JobName   [64]int8
}

type kernelmonitorServiceEndpoint struct {
	ServiceName [64]int8
	Namespace   [64]int8
	ClusterIp   [16]int8
	Port        uint16
	Pad         [2]uint8
}

type kernelmonitorVolumeInfo struct {
	PvcName   [64]int8
	Namespace [64]int8
	MountPath [128]int8
	VolumeId  [64]int8
}

// loadKernelmonitor returns the embedded CollectionSpec for kernelmonitor.
func loadKernelmonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KernelmonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load kernelmonitor: %w", err)
	}

	return spec, err
}

// loadKernelmonitorObjects loads kernelmonitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*kernelmonitorObjects
//	*kernelmonitorPrograms
//	*kernelmonitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadKernelmonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadKernelmonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// kernelmonitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kernelmonitorSpecs struct {
	kernelmonitorProgramSpecs
	kernelmonitorMapSpecs
}

// kernelmonitorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kernelmonitorProgramSpecs struct {
	TraceExec       *ebpf.ProgramSpec `ebpf:"trace_exec"`
	TraceFree       *ebpf.ProgramSpec `ebpf:"trace_free"`
	TraceMalloc     *ebpf.ProgramSpec `ebpf:"trace_malloc"`
	TraceOpenat     *ebpf.ProgramSpec `ebpf:"trace_openat"`
	TraceTcpConnect *ebpf.ProgramSpec `ebpf:"trace_tcp_connect"`
}

// kernelmonitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kernelmonitorMapSpecs struct {
	ContainerInfoMap    *ebpf.MapSpec `ebpf:"container_info_map"`
	ContainerPids       *ebpf.MapSpec `ebpf:"container_pids"`
	DnsQueryMap         *ebpf.MapSpec `ebpf:"dns_query_map"`
	Events              *ebpf.MapSpec `ebpf:"events"`
	MountInfoMap        *ebpf.MapSpec `ebpf:"mount_info_map"`
	PodInfoMap          *ebpf.MapSpec `ebpf:"pod_info_map"`
	ProcessLineageMap   *ebpf.MapSpec `ebpf:"process_lineage_map"`
	ServiceEndpointsMap *ebpf.MapSpec `ebpf:"service_endpoints_map"`
	VolumeInfoMap       *ebpf.MapSpec `ebpf:"volume_info_map"`
}

// kernelmonitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadKernelmonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type kernelmonitorObjects struct {
	kernelmonitorPrograms
	kernelmonitorMaps
}

func (o *kernelmonitorObjects) Close() error {
	return _KernelmonitorClose(
		&o.kernelmonitorPrograms,
		&o.kernelmonitorMaps,
	)
}

// kernelmonitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadKernelmonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type kernelmonitorMaps struct {
	ContainerInfoMap    *ebpf.Map `ebpf:"container_info_map"`
	ContainerPids       *ebpf.Map `ebpf:"container_pids"`
	DnsQueryMap         *ebpf.Map `ebpf:"dns_query_map"`
	Events              *ebpf.Map `ebpf:"events"`
	MountInfoMap        *ebpf.Map `ebpf:"mount_info_map"`
	PodInfoMap          *ebpf.Map `ebpf:"pod_info_map"`
	ProcessLineageMap   *ebpf.Map `ebpf:"process_lineage_map"`
	ServiceEndpointsMap *ebpf.Map `ebpf:"service_endpoints_map"`
	VolumeInfoMap       *ebpf.Map `ebpf:"volume_info_map"`
}

func (m *kernelmonitorMaps) Close() error {
	return _KernelmonitorClose(
		m.ContainerInfoMap,
		m.ContainerPids,
		m.DnsQueryMap,
		m.Events,
		m.MountInfoMap,
		m.PodInfoMap,
		m.ProcessLineageMap,
		m.ServiceEndpointsMap,
		m.VolumeInfoMap,
	)
}

// kernelmonitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadKernelmonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type kernelmonitorPrograms struct {
	TraceExec       *ebpf.Program `ebpf:"trace_exec"`
	TraceFree       *ebpf.Program `ebpf:"trace_free"`
	TraceMalloc     *ebpf.Program `ebpf:"trace_malloc"`
	TraceOpenat     *ebpf.Program `ebpf:"trace_openat"`
	TraceTcpConnect *ebpf.Program `ebpf:"trace_tcp_connect"`
}

func (p *kernelmonitorPrograms) Close() error {
	return _KernelmonitorClose(
		p.TraceExec,
		p.TraceFree,
		p.TraceMalloc,
		p.TraceOpenat,
		p.TraceTcpConnect,
	)
}

func _KernelmonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kernelmonitor_bpfel_x86.o
var _KernelmonitorBytes []byte
