// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type network_monitorConnectionKey struct {
	Pid      uint32
	SrcIp    uint32
	DstIp    uint32
	SrcPort  uint16
	DstPort  uint16
	Protocol uint8
	_        [3]byte
}

type network_monitorConnectionStats struct {
	StartTime   uint64
	LastSeen    uint64
	BytesSent   uint64
	BytesRecv   uint64
	PacketsSent uint64
	PacketsRecv uint64
	Retransmits uint64
	RttMin      uint32
	RttMax      uint32
	RttAvg      uint32
	State       uint8
	Failed      uint8
	_           [2]byte
}

// loadNetwork_monitor returns the embedded CollectionSpec for network_monitor.
func loadNetwork_monitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Network_monitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load network_monitor: %w", err)
	}

	return spec, err
}

// loadNetwork_monitorObjects loads network_monitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*network_monitorObjects
//	*network_monitorPrograms
//	*network_monitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadNetwork_monitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadNetwork_monitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// network_monitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type network_monitorSpecs struct {
	network_monitorProgramSpecs
	network_monitorMapSpecs
}

// network_monitorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type network_monitorProgramSpecs struct {
	TcpClose          *ebpf.ProgramSpec `ebpf:"tcp_close"`
	TcpRcvEstablished *ebpf.ProgramSpec `ebpf:"tcp_rcv_established"`
	TcpRetransmitSkb  *ebpf.ProgramSpec `ebpf:"tcp_retransmit_skb"`
	TcpV4ConnectEntry *ebpf.ProgramSpec `ebpf:"tcp_v4_connect_entry"`
	TcpV4ConnectExit  *ebpf.ProgramSpec `ebpf:"tcp_v4_connect_exit"`
	TraceKfreeSkb     *ebpf.ProgramSpec `ebpf:"trace_kfree_skb"`
	UdpSendmsg        *ebpf.ProgramSpec `ebpf:"udp_sendmsg"`
}

// network_monitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type network_monitorMapSpecs struct {
	ConnectionTracker *ebpf.MapSpec `ebpf:"connection_tracker"`
	NetworkEvents     *ebpf.MapSpec `ebpf:"network_events"`
	PidStartTime      *ebpf.MapSpec `ebpf:"pid_start_time"`
}

// network_monitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadNetwork_monitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type network_monitorObjects struct {
	network_monitorPrograms
	network_monitorMaps
}

func (o *network_monitorObjects) Close() error {
	return _Network_monitorClose(
		&o.network_monitorPrograms,
		&o.network_monitorMaps,
	)
}

// network_monitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadNetwork_monitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type network_monitorMaps struct {
	ConnectionTracker *ebpf.Map `ebpf:"connection_tracker"`
	NetworkEvents     *ebpf.Map `ebpf:"network_events"`
	PidStartTime      *ebpf.Map `ebpf:"pid_start_time"`
}

func (m *network_monitorMaps) Close() error {
	return _Network_monitorClose(
		m.ConnectionTracker,
		m.NetworkEvents,
		m.PidStartTime,
	)
}

// network_monitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadNetwork_monitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type network_monitorPrograms struct {
	TcpClose          *ebpf.Program `ebpf:"tcp_close"`
	TcpRcvEstablished *ebpf.Program `ebpf:"tcp_rcv_established"`
	TcpRetransmitSkb  *ebpf.Program `ebpf:"tcp_retransmit_skb"`
	TcpV4ConnectEntry *ebpf.Program `ebpf:"tcp_v4_connect_entry"`
	TcpV4ConnectExit  *ebpf.Program `ebpf:"tcp_v4_connect_exit"`
	TraceKfreeSkb     *ebpf.Program `ebpf:"trace_kfree_skb"`
	UdpSendmsg        *ebpf.Program `ebpf:"udp_sendmsg"`
}

func (p *network_monitorPrograms) Close() error {
	return _Network_monitorClose(
		p.TcpClose,
		p.TcpRcvEstablished,
		p.TcpRetransmitSkb,
		p.TcpV4ConnectEntry,
		p.TcpV4ConnectExit,
		p.TraceKfreeSkb,
		p.UdpSendmsg,
	)
}

func _Network_monitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed network_monitor_bpfel_x86.o
var _Network_monitorBytes []byte
