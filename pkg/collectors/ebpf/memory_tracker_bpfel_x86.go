// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadMemory_tracker returns the embedded CollectionSpec for memory_tracker.
func loadMemory_tracker() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Memory_trackerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load memory_tracker: %w", err)
	}

	return spec, err
}

// loadMemory_trackerObjects loads memory_tracker and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*memory_trackerObjects
//	*memory_trackerPrograms
//	*memory_trackerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadMemory_trackerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMemory_tracker()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// memory_trackerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type memory_trackerSpecs struct {
	memory_trackerProgramSpecs
	memory_trackerMapSpecs
}

// memory_trackerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type memory_trackerProgramSpecs struct {
	TraceMmPageAlloc *ebpf.ProgramSpec `ebpf:"trace_mm_page_alloc"`
	TraceMmPageFree  *ebpf.ProgramSpec `ebpf:"trace_mm_page_free"`
}

// memory_trackerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type memory_trackerMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// memory_trackerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMemory_trackerObjects or ebpf.CollectionSpec.LoadAndAssign.
type Memory_trackerObjects struct {
	memory_trackerPrograms
	memory_trackerMaps
}

func (o *Memory_trackerObjects) Close() error {
	return _Memory_trackerClose(
		&o.memory_trackerPrograms,
		&o.memory_trackerMaps,
	)
}

// memory_trackerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMemory_trackerObjects or ebpf.CollectionSpec.LoadAndAssign.
type memory_trackerMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *memory_trackerMaps) Close() error {
	return _Memory_trackerClose(
		m.Events,
	)
}

// memory_trackerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMemory_trackerObjects or ebpf.CollectionSpec.LoadAndAssign.
type memory_trackerPrograms struct {
	TraceMmPageAlloc *ebpf.Program `ebpf:"trace_mm_page_alloc"`
	TraceMmPageFree  *ebpf.Program `ebpf:"trace_mm_page_free"`
}

func (p *memory_trackerPrograms) Close() error {
	return _Memory_trackerClose(
		p.TraceMmPageAlloc,
		p.TraceMmPageFree,
	)
}

func _Memory_trackerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed memory_tracker_bpfel_x86.o
var _Memory_trackerBytes []byte
