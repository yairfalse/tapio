// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadMemorytracker returns the embedded CollectionSpec for memorytracker.
func loadMemorytracker() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MemorytrackerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load memorytracker: %w", err)
	}

	return spec, err
}

// loadMemorytrackerObjects loads memorytracker and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*memorytrackerObjects
//	*memorytrackerPrograms
//	*memorytrackerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMemorytrackerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMemorytracker()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// memorytrackerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type memorytrackerSpecs struct {
	memorytrackerProgramSpecs
	memorytrackerMapSpecs
}

// memorytrackerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type memorytrackerProgramSpecs struct {
	TraceMmPageAlloc    *ebpf.ProgramSpec `ebpf:"trace_mm_page_alloc"`
	TraceMmPageFree     *ebpf.ProgramSpec `ebpf:"trace_mm_page_free"`
	TraceOomKillProcess *ebpf.ProgramSpec `ebpf:"trace_oom_kill_process"`
}

// memorytrackerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type memorytrackerMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// memorytrackerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMemorytrackerObjects or ebpf.CollectionSpec.LoadAndAssign.
type memorytrackerObjects struct {
	memorytrackerPrograms
	memorytrackerMaps
}

func (o *memorytrackerObjects) Close() error {
	return _MemorytrackerClose(
		&o.memorytrackerPrograms,
		&o.memorytrackerMaps,
	)
}

// memorytrackerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMemorytrackerObjects or ebpf.CollectionSpec.LoadAndAssign.
type memorytrackerMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *memorytrackerMaps) Close() error {
	return _MemorytrackerClose(
		m.Events,
	)
}

// memorytrackerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMemorytrackerObjects or ebpf.CollectionSpec.LoadAndAssign.
type memorytrackerPrograms struct {
	TraceMmPageAlloc    *ebpf.Program `ebpf:"trace_mm_page_alloc"`
	TraceMmPageFree     *ebpf.Program `ebpf:"trace_mm_page_free"`
	TraceOomKillProcess *ebpf.Program `ebpf:"trace_oom_kill_process"`
}

func (p *memorytrackerPrograms) Close() error {
	return _MemorytrackerClose(
		p.TraceMmPageAlloc,
		p.TraceMmPageFree,
		p.TraceOomKillProcess,
	)
}

func _MemorytrackerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed memorytracker_bpfel_arm64.o
var _MemorytrackerBytes []byte
