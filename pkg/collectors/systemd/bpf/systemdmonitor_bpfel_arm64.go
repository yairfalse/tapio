// Code generated by bpf2go; DO NOT EDIT.
//go:build linux && arm64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type systemdMonitorServiceState struct {
	StartTime    uint64
	StopTime     uint64
	MainPid      uint32
	ControlPid   uint32
	State        uint8
	RestartCount uint8
	UnitName     [64]int8
	_            [6]byte
}

// loadSystemdMonitor returns the embedded CollectionSpec for systemdMonitor.
func loadSystemdMonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SystemdMonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load systemdMonitor: %w", err)
	}

	return spec, err
}

// loadSystemdMonitorObjects loads systemdMonitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*systemdMonitorObjects
//	*systemdMonitorPrograms
//	*systemdMonitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSystemdMonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSystemdMonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// systemdMonitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type systemdMonitorSpecs struct {
	systemdMonitorProgramSpecs
	systemdMonitorMapSpecs
}

// systemdMonitorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type systemdMonitorProgramSpecs struct {
	TraceExec   *ebpf.ProgramSpec `ebpf:"trace_exec"`
	TraceExit   *ebpf.ProgramSpec `ebpf:"trace_exit"`
	TraceSignal *ebpf.ProgramSpec `ebpf:"trace_signal"`
}

// systemdMonitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type systemdMonitorMapSpecs struct {
	Events        *ebpf.MapSpec `ebpf:"events"`
	PidToCgroup   *ebpf.MapSpec `ebpf:"pid_to_cgroup"`
	ServiceStates *ebpf.MapSpec `ebpf:"service_states"`
	SystemdPids   *ebpf.MapSpec `ebpf:"systemd_pids"`
}

// systemdMonitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSystemdMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type systemdMonitorObjects struct {
	systemdMonitorPrograms
	systemdMonitorMaps
}

func (o *systemdMonitorObjects) Close() error {
	return _SystemdMonitorClose(
		&o.systemdMonitorPrograms,
		&o.systemdMonitorMaps,
	)
}

// systemdMonitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSystemdMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type systemdMonitorMaps struct {
	Events        *ebpf.Map `ebpf:"events"`
	PidToCgroup   *ebpf.Map `ebpf:"pid_to_cgroup"`
	ServiceStates *ebpf.Map `ebpf:"service_states"`
	SystemdPids   *ebpf.Map `ebpf:"systemd_pids"`
}

func (m *systemdMonitorMaps) Close() error {
	return _SystemdMonitorClose(
		m.Events,
		m.PidToCgroup,
		m.ServiceStates,
		m.SystemdPids,
	)
}

// systemdMonitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSystemdMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type systemdMonitorPrograms struct {
	TraceExec   *ebpf.Program `ebpf:"trace_exec"`
	TraceExit   *ebpf.Program `ebpf:"trace_exit"`
	TraceSignal *ebpf.Program `ebpf:"trace_signal"`
}

func (p *systemdMonitorPrograms) Close() error {
	return _SystemdMonitorClose(
		p.TraceExec,
		p.TraceExit,
		p.TraceSignal,
	)
}

func _SystemdMonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed systemdmonitor_bpfel_arm64.o
var _SystemdMonitorBytes []byte
