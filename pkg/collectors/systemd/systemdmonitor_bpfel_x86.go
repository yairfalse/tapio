// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package systemd

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type systemdMonitorBpfStatistics struct {
	Invocations    uint64
	EventsSent     uint64
	EventsDropped  uint64
	Errors         uint64
	LastUpdateNs   uint64
	BytesProcessed uint64
	FilterHits     uint64
	FilterMisses   uint64
}

type systemdMonitorSystemdEvent struct {
	Timestamp   uint64
	Pid         uint32
	Ppid        uint32
	Uid         uint32
	Gid         uint32
	CgroupId    uint64
	EventType   uint8
	Pad         [3]uint8
	Comm        [16]int8
	ServiceName [64]int8
	CgroupPath  [256]int8
	ExitCode    uint32
	Signal      uint32
}

// loadSystemdMonitor returns the embedded CollectionSpec for systemdMonitor.
func loadSystemdMonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SystemdMonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load systemdMonitor: %w", err)
	}

	return spec, err
}

// loadSystemdMonitorObjects loads systemdMonitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*systemdMonitorObjects
//	*systemdMonitorPrograms
//	*systemdMonitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSystemdMonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSystemdMonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// systemdMonitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type systemdMonitorSpecs struct {
	systemdMonitorProgramSpecs
	systemdMonitorMapSpecs
}

// systemdMonitorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type systemdMonitorProgramSpecs struct {
	TraceCgroupMkdir *ebpf.ProgramSpec `ebpf:"trace_cgroup_mkdir"`
	TraceCgroupRmdir *ebpf.ProgramSpec `ebpf:"trace_cgroup_rmdir"`
	TraceDbusSignal  *ebpf.ProgramSpec `ebpf:"trace_dbus_signal"`
	TraceExec        *ebpf.ProgramSpec `ebpf:"trace_exec"`
	TraceExit        *ebpf.ProgramSpec `ebpf:"trace_exit"`
}

// systemdMonitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type systemdMonitorMapSpecs struct {
	Events         *ebpf.MapSpec `ebpf:"events"`
	ProbeStats     *ebpf.MapSpec `ebpf:"probe_stats"`
	ProcessCache   *ebpf.MapSpec `ebpf:"process_cache"`
	ServiceTracker *ebpf.MapSpec `ebpf:"service_tracker"`
}

// systemdMonitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSystemdMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type systemdMonitorObjects struct {
	systemdMonitorPrograms
	systemdMonitorMaps
}

func (o *systemdMonitorObjects) Close() error {
	return _SystemdMonitorClose(
		&o.systemdMonitorPrograms,
		&o.systemdMonitorMaps,
	)
}

// systemdMonitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSystemdMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type systemdMonitorMaps struct {
	Events         *ebpf.Map `ebpf:"events"`
	ProbeStats     *ebpf.Map `ebpf:"probe_stats"`
	ProcessCache   *ebpf.Map `ebpf:"process_cache"`
	ServiceTracker *ebpf.Map `ebpf:"service_tracker"`
}

func (m *systemdMonitorMaps) Close() error {
	return _SystemdMonitorClose(
		m.Events,
		m.ProbeStats,
		m.ProcessCache,
		m.ServiceTracker,
	)
}

// systemdMonitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSystemdMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type systemdMonitorPrograms struct {
	TraceCgroupMkdir *ebpf.Program `ebpf:"trace_cgroup_mkdir"`
	TraceCgroupRmdir *ebpf.Program `ebpf:"trace_cgroup_rmdir"`
	TraceDbusSignal  *ebpf.Program `ebpf:"trace_dbus_signal"`
	TraceExec        *ebpf.Program `ebpf:"trace_exec"`
	TraceExit        *ebpf.Program `ebpf:"trace_exit"`
}

func (p *systemdMonitorPrograms) Close() error {
	return _SystemdMonitorClose(
		p.TraceCgroupMkdir,
		p.TraceCgroupRmdir,
		p.TraceDbusSignal,
		p.TraceExec,
		p.TraceExit,
	)
}

func _SystemdMonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed systemdmonitor_bpfel_x86.o
var _SystemdMonitorBytes []byte
