// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package systemd

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type systemdmonitorServiceState struct {
	StartTime    uint64
	StopTime     uint64
	MainPid      uint32
	ControlPid   uint32
	State        uint8
	RestartCount uint8
	UnitName     [64]int8
	_            [6]byte
}

// loadSystemdmonitor returns the embedded CollectionSpec for systemdmonitor.
func loadSystemdmonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SystemdmonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load systemdmonitor: %w", err)
	}

	return spec, err
}

// loadSystemdmonitorObjects loads systemdmonitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*systemdmonitorObjects
//	*systemdmonitorPrograms
//	*systemdmonitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSystemdmonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSystemdmonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// systemdmonitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type systemdmonitorSpecs struct {
	systemdmonitorProgramSpecs
	systemdmonitorMapSpecs
}

// systemdmonitorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type systemdmonitorProgramSpecs struct {
	TraceExec   *ebpf.ProgramSpec `ebpf:"trace_exec"`
	TraceExit   *ebpf.ProgramSpec `ebpf:"trace_exit"`
	TraceSignal *ebpf.ProgramSpec `ebpf:"trace_signal"`
}

// systemdmonitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type systemdmonitorMapSpecs struct {
	Events        *ebpf.MapSpec `ebpf:"events"`
	PidToCgroup   *ebpf.MapSpec `ebpf:"pid_to_cgroup"`
	ServiceStates *ebpf.MapSpec `ebpf:"service_states"`
	SystemdPids   *ebpf.MapSpec `ebpf:"systemd_pids"`
}

// systemdmonitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSystemdmonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type systemdmonitorObjects struct {
	systemdmonitorPrograms
	systemdmonitorMaps
}

func (o *systemdmonitorObjects) Close() error {
	return _SystemdmonitorClose(
		&o.systemdmonitorPrograms,
		&o.systemdmonitorMaps,
	)
}

// systemdmonitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSystemdmonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type systemdmonitorMaps struct {
	Events        *ebpf.Map `ebpf:"events"`
	PidToCgroup   *ebpf.Map `ebpf:"pid_to_cgroup"`
	ServiceStates *ebpf.Map `ebpf:"service_states"`
	SystemdPids   *ebpf.Map `ebpf:"systemd_pids"`
}

func (m *systemdmonitorMaps) Close() error {
	return _SystemdmonitorClose(
		m.Events,
		m.PidToCgroup,
		m.ServiceStates,
		m.SystemdPids,
	)
}

// systemdmonitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSystemdmonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type systemdmonitorPrograms struct {
	TraceExec   *ebpf.Program `ebpf:"trace_exec"`
	TraceExit   *ebpf.Program `ebpf:"trace_exit"`
	TraceSignal *ebpf.Program `ebpf:"trace_signal"`
}

func (p *systemdmonitorPrograms) Close() error {
	return _SystemdmonitorClose(
		p.TraceExec,
		p.TraceExit,
		p.TraceSignal,
	)
}

func _SystemdmonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed systemdmonitor_bpfel_x86.o
var _SystemdmonitorBytes []byte
