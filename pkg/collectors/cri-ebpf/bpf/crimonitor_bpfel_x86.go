// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type crimonitorContainerMetadata struct {
	ContainerId [64]int8
	PodUid      [36]int8
	PodName     [64]int8
	Namespace   [64]int8
	_           [4]byte
	MemoryLimit uint64
	CgroupId    uint64
}

// loadCrimonitor returns the embedded CollectionSpec for crimonitor.
func loadCrimonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_CrimonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load crimonitor: %w", err)
	}

	return spec, err
}

// loadCrimonitorObjects loads crimonitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*crimonitorObjects
//	*crimonitorPrograms
//	*crimonitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadCrimonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadCrimonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// crimonitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type crimonitorSpecs struct {
	crimonitorProgramSpecs
	crimonitorMapSpecs
}

// crimonitorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type crimonitorProgramSpecs struct {
	TraceMemcgOom    *ebpf.ProgramSpec `ebpf:"trace_memcg_oom"`
	TraceOomKill     *ebpf.ProgramSpec `ebpf:"trace_oom_kill"`
	TraceProcessExit *ebpf.ProgramSpec `ebpf:"trace_process_exit"`
	TraceProcessFork *ebpf.ProgramSpec `ebpf:"trace_process_fork"`
}

// crimonitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type crimonitorMapSpecs struct {
	CgroupMap    *ebpf.MapSpec `ebpf:"cgroup_map"`
	ContainerMap *ebpf.MapSpec `ebpf:"container_map"`
	Events       *ebpf.MapSpec `ebpf:"events"`
	StatsMap     *ebpf.MapSpec `ebpf:"stats_map"`
}

// crimonitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadCrimonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type crimonitorObjects struct {
	crimonitorPrograms
	crimonitorMaps
}

func (o *crimonitorObjects) Close() error {
	return _CrimonitorClose(
		&o.crimonitorPrograms,
		&o.crimonitorMaps,
	)
}

// crimonitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadCrimonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type crimonitorMaps struct {
	CgroupMap    *ebpf.Map `ebpf:"cgroup_map"`
	ContainerMap *ebpf.Map `ebpf:"container_map"`
	Events       *ebpf.Map `ebpf:"events"`
	StatsMap     *ebpf.Map `ebpf:"stats_map"`
}

func (m *crimonitorMaps) Close() error {
	return _CrimonitorClose(
		m.CgroupMap,
		m.ContainerMap,
		m.Events,
		m.StatsMap,
	)
}

// crimonitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadCrimonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type crimonitorPrograms struct {
	TraceMemcgOom    *ebpf.Program `ebpf:"trace_memcg_oom"`
	TraceOomKill     *ebpf.Program `ebpf:"trace_oom_kill"`
	TraceProcessExit *ebpf.Program `ebpf:"trace_process_exit"`
	TraceProcessFork *ebpf.Program `ebpf:"trace_process_fork"`
}

func (p *crimonitorPrograms) Close() error {
	return _CrimonitorClose(
		p.TraceMemcgOom,
		p.TraceOomKill,
		p.TraceProcessExit,
		p.TraceProcessFork,
	)
}

func _CrimonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed crimonitor_bpfel_x86.o
var _CrimonitorBytes []byte
