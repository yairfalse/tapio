syntax = "proto3";

package tapio.v1;

option go_package = "github.com/yairfalse/tapio/proto/tapio/v1;tapiov1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "tapio/v1/common.proto";

// Metric represents a time-series metric with OTEL-compatible attributes
message Metric {
  string id = 1;
  string name = 2;
  string description = 3;
  
  // Metric type following OTEL conventions
  enum MetricType {
    METRIC_TYPE_UNSPECIFIED = 0;
    METRIC_TYPE_GAUGE = 1;
    METRIC_TYPE_COUNTER = 2;
    METRIC_TYPE_HISTOGRAM = 3;
    METRIC_TYPE_SUMMARY = 4;
  }
  MetricType type = 4;
  
  // Unit of measurement (e.g., "bytes", "ms", "percent")
  string unit = 5;
  
  // Data points
  repeated DataPoint data_points = 6;
  
  // Resource this metric belongs to
  ResourceIdentifier resource = 7;
  
  // Labels for filtering and grouping
  map<string, string> labels = 8;
  
  // OTEL instrumentation scope
  InstrumentationScope scope = 9;
}

// DataPoint represents a single metric measurement
message DataPoint {
  google.protobuf.Timestamp timestamp = 1;
  
  // Value based on metric type
  oneof value {
    double gauge_value = 2;
    int64 counter_value = 3;
    HistogramValue histogram_value = 4;
    SummaryValue summary_value = 5;
  }
  
  // Exemplar for tracing connection
  Exemplar exemplar = 6;
  
  // Additional attributes
  map<string, string> attributes = 7;
}

// HistogramValue for histogram metrics
message HistogramValue {
  int64 count = 1;
  double sum = 2;
  repeated double bucket_counts = 3;
  repeated double explicit_bounds = 4;
  double min = 5;
  double max = 6;
}

// SummaryValue for summary metrics
message SummaryValue {
  int64 count = 1;
  double sum = 2;
  repeated Quantile quantiles = 3;
}

// Quantile for summary metrics
message Quantile {
  double quantile = 1;
  double value = 2;
}

// Exemplar connects metrics to traces
message Exemplar {
  double value = 1;
  google.protobuf.Timestamp timestamp = 2;
  string trace_id = 3;
  string span_id = 4;
  map<string, string> labels = 5;
}

// InstrumentationScope identifies the instrumentation library
message InstrumentationScope {
  string name = 1;
  string version = 2;
  string schema_url = 3;
  map<string, string> attributes = 4;
}

// Trace represents a distributed trace
message Trace {
  string trace_id = 1;
  string root_span_id = 2;
  
  // All spans in this trace
  repeated Span spans = 3;
  
  // Trace metadata
  google.protobuf.Timestamp start_time = 4;
  google.protobuf.Timestamp end_time = 5;
  google.protobuf.Duration duration = 6;
  
  // Service map for this trace
  repeated ServiceInfo services = 7;
  
  // Overall trace status
  TraceStatus status = 8;
  
  // Resource information
  map<string, ResourceInfo> resources = 9;
}

// Span represents a single operation in a trace
message Span {
  string trace_id = 1;
  string span_id = 2;
  string parent_span_id = 3;
  string operation_name = 4;
  
  // Timing
  google.protobuf.Timestamp start_time = 5;
  google.protobuf.Timestamp end_time = 6;
  google.protobuf.Duration duration = 7;
  
  // Span kind (OTEL compatible)
  enum SpanKind {
    SPAN_KIND_UNSPECIFIED = 0;
    SPAN_KIND_INTERNAL = 1;
    SPAN_KIND_SERVER = 2;
    SPAN_KIND_CLIENT = 3;
    SPAN_KIND_PRODUCER = 4;
    SPAN_KIND_CONSUMER = 5;
  }
  SpanKind kind = 8;
  
  // Status
  SpanStatus status = 9;
  
  // Attributes
  map<string, string> attributes = 10;
  
  // Events within the span
  repeated SpanEvent events = 11;
  
  // Links to other spans
  repeated SpanLink links = 12;
  
  // Resource that produced this span
  ResourceIdentifier resource = 13;
  
  // Instrumentation info
  InstrumentationScope scope = 14;
}

// SpanStatus represents the status of a span
message SpanStatus {
  enum StatusCode {
    STATUS_CODE_UNSET = 0;
    STATUS_CODE_OK = 1;
    STATUS_CODE_ERROR = 2;
  }
  StatusCode code = 1;
  string message = 2;
}

// SpanEvent represents an event within a span
message SpanEvent {
  string name = 1;
  google.protobuf.Timestamp timestamp = 2;
  map<string, string> attributes = 3;
}

// SpanLink represents a link to another span
message SpanLink {
  string trace_id = 1;
  string span_id = 2;
  map<string, string> attributes = 3;
}

// TraceStatus represents overall trace health
message TraceStatus {
  enum HealthStatus {
    HEALTH_STATUS_UNSPECIFIED = 0;
    HEALTH_STATUS_HEALTHY = 1;
    HEALTH_STATUS_DEGRADED = 2;
    HEALTH_STATUS_ERROR = 3;
  }
  HealthStatus health = 1;
  int32 error_count = 2;
  int32 total_spans = 3;
  repeated string error_messages = 4;
}

// ServiceInfo represents a service in a trace
message ServiceInfo {
  string name = 1;
  string version = 2;
  map<string, string> attributes = 3;
  int32 span_count = 4;
  google.protobuf.Duration total_duration = 5;
}

// ResourceInfo provides detailed resource information
message ResourceInfo {
  ResourceIdentifier identifier = 1;
  map<string, string> attributes = 2;
  repeated string telemetry_sdk = 3;
}

// Log represents a log entry with OTEL compatibility
message Log {
  string id = 1;
  google.protobuf.Timestamp timestamp = 2;
  
  // Severity
  enum LogSeverity {
    LOG_SEVERITY_UNSPECIFIED = 0;
    LOG_SEVERITY_TRACE = 1;
    LOG_SEVERITY_DEBUG = 2;
    LOG_SEVERITY_INFO = 3;
    LOG_SEVERITY_WARN = 4;
    LOG_SEVERITY_ERROR = 5;
    LOG_SEVERITY_FATAL = 6;
  }
  LogSeverity severity = 3;
  string severity_text = 4;
  
  // Log body
  google.protobuf.Struct body = 5;
  
  // Resource that emitted this log
  ResourceIdentifier resource = 6;
  
  // Attributes
  map<string, string> attributes = 7;
  
  // Trace context
  string trace_id = 8;
  string span_id = 9;
  
  // Instrumentation info
  InstrumentationScope scope = 10;
}

// Profile represents a continuous profiling sample
message Profile {
  string id = 1;
  string profile_type = 2;  // e.g., "cpu", "memory", "block", "mutex"
  
  // Time range of the profile
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  google.protobuf.Duration duration = 5;
  
  // Sample data (pprof format)
  bytes pprof_data = 6;
  
  // Resource that generated this profile
  ResourceIdentifier resource = 7;
  
  // Labels for filtering
  map<string, string> labels = 8;
  
  // Trace correlation
  repeated string trace_ids = 9;
  
  // Profile metadata
  ProfileMetadata metadata = 10;
}

// ProfileMetadata contains profile analysis metadata
message ProfileMetadata {
  int64 sample_count = 1;
  string sample_unit = 2;
  double total_value = 3;
  
  // Top functions
  repeated ProfileFunction top_functions = 4;
  
  // Detected issues
  repeated string detected_issues = 5;
}

// ProfileFunction represents a function in a profile
message ProfileFunction {
  string name = 1;
  string file = 2;
  int32 line = 3;
  double self_value = 4;
  double cumulative_value = 5;
  double percentage = 6;
}

// MetricQuery for querying metrics
message MetricQuery {
  repeated string metric_names = 1;
  Filter filter = 2;
  
  // Aggregation
  enum AggregationType {
    AGGREGATION_TYPE_UNSPECIFIED = 0;
    AGGREGATION_TYPE_AVG = 1;
    AGGREGATION_TYPE_SUM = 2;
    AGGREGATION_TYPE_MIN = 3;
    AGGREGATION_TYPE_MAX = 4;
    AGGREGATION_TYPE_COUNT = 5;
    AGGREGATION_TYPE_P50 = 6;
    AGGREGATION_TYPE_P95 = 7;
    AGGREGATION_TYPE_P99 = 8;
  }
  AggregationType aggregation = 3;
  
  // Grouping
  repeated string group_by = 4;
  
  // Resolution
  google.protobuf.Duration resolution = 5;
}

// TraceQuery for querying traces
message TraceQuery {
  Filter filter = 1;
  
  // Trace-specific filters
  google.protobuf.Duration min_duration = 2;
  google.protobuf.Duration max_duration = 3;
  bool errors_only = 4;
  string root_service = 5;
  repeated string involved_services = 6;
  
  // Include options
  bool include_spans = 7;
  bool include_metrics = 8;
  bool include_logs = 9;
}

// GetMetricsRequest
message GetMetricsRequest {
  MetricQuery query = 1;
}

// GetMetricsResponse
message GetMetricsResponse {
  repeated Metric metrics = 1;
  int64 total_count = 2;
  string next_page_token = 3;
  map<string, string> metadata = 4;
}

// GetTracesRequest
message GetTracesRequest {
  repeated string trace_ids = 1;
  TraceQuery query = 2;
}

// GetTracesResponse
message GetTracesResponse {
  repeated Trace traces = 1;
  int64 total_count = 2;
  string next_page_token = 3;
  map<string, string> metadata = 4;
}

// GetLogsRequest
message GetLogsRequest {
  Filter filter = 1;
  bool include_trace_context = 2;
}

// GetLogsResponse
message GetLogsResponse {
  repeated Log logs = 1;
  int64 total_count = 2;
  string next_page_token = 3;
}

// GetProfilesRequest
message GetProfilesRequest {
  Filter filter = 1;
  string profile_type = 2;
  bool include_analysis = 3;
}

// GetProfilesResponse
message GetProfilesResponse {
  repeated Profile profiles = 1;
  int64 total_count = 2;
  string next_page_token = 3;
}

// ExportMetricsRequest for push-based metrics
message ExportMetricsRequest {
  repeated Metric metrics = 1;
  string collector_id = 2;
  map<string, string> metadata = 3;
}

// ExportMetricsResponse
message ExportMetricsResponse {
  int32 accepted_metrics = 1;
  int32 rejected_metrics = 2;
  repeated Error errors = 3;
}

// ObservabilityService provides metrics, traces, logs, and profiles
service ObservabilityService {
  // Metrics
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);
  rpc ExportMetrics(ExportMetricsRequest) returns (ExportMetricsResponse);
  rpc StreamMetrics(MetricQuery) returns (stream Metric);
  
  // Traces
  rpc GetTraces(GetTracesRequest) returns (GetTracesResponse);
  rpc GetTraceTimeline(GetTracesRequest) returns (TraceTimeline);
  
  // Logs
  rpc GetLogs(GetLogsRequest) returns (GetLogsResponse);
  rpc StreamLogs(Filter) returns (stream Log);
  
  // Profiles
  rpc GetProfiles(GetProfilesRequest) returns (GetProfilesResponse);
  rpc AnalyzeProfile(Profile) returns (ProfileAnalysis);
}

// TraceTimeline provides a timeline view of traces
message TraceTimeline {
  repeated TraceTimelineEntry entries = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  map<string, ServiceInfo> services = 4;
}

// TraceTimelineEntry represents a trace in the timeline
message TraceTimelineEntry {
  string trace_id = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Duration duration = 3;
  string root_operation = 4;
  TraceStatus status = 5;
  repeated string involved_services = 6;
}

// ProfileAnalysis provides detailed profile analysis
message ProfileAnalysis {
  string profile_id = 1;
  repeated ProfileFunction hot_spots = 2;
  repeated string bottlenecks = 3;
  repeated ProfileOptimization optimizations = 4;
  map<string, double> statistics = 5;
}

// ProfileOptimization suggests performance improvements
message ProfileOptimization {
  string function = 1;
  string issue = 2;
  string suggestion = 3;
  double potential_improvement = 4;  // Percentage
  string code_location = 5;
}