syntax = "proto3";

package tapio.events.v1;

option go_package = "github.com/yairfalse/tapio/pkg/events;events";

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// UnifiedEvent is the core message format for all Tapio events.
// It provides a universal representation for events from any source
// (eBPF, systemd, journald, Kubernetes, etc.) while maintaining
// efficient serialization and forward/backward compatibility.
message UnifiedEvent {
  // Unique identifier for this event (UUID format)
  string id = 1;
  
  // When the event occurred
  google.protobuf.Timestamp timestamp = 2;
  
  // Event metadata
  EventMetadata metadata = 3;
  
  // Source information
  EventSource source = 4;
  
  // Entity this event relates to
  EntityContext entity = 5;
  
  // Event-specific data - can be strongly typed or generic
  oneof data {
    // Strongly typed event data for known event types
    NetworkEvent network = 10;
    MemoryEvent memory = 11;
    CPUEvent cpu = 12;
    IOEvent io = 13;
    SystemEvent system = 14;
    ProcessEvent process = 15;
    ContainerEvent container = 16;
    KubernetesEvent kubernetes = 17;
    LogEvent log = 18;
    MetricEvent metric = 19;
    TraceEvent trace = 20;
    
    // Generic data for custom or unknown event types
    google.protobuf.Struct generic = 50;
    
    // Raw data for high-performance scenarios
    bytes raw = 51;
  }
  
  // Event attributes (key-value pairs)
  map<string, AttributeValue> attributes = 30;
  
  // Labels for filtering and grouping
  map<string, string> labels = 31;
  
  // Correlation information
  CorrelationContext correlation = 32;
  
  // Quality and confidence metadata
  QualityMetadata quality = 33;
}

// EventMetadata contains event classification and routing information
message EventMetadata {
  // Event type (e.g., "network.connection", "memory.allocation", "pod.created")
  string type = 1;
  
  // Event category for high-level grouping
  EventCategory category = 2;
  
  // Severity level
  EventSeverity severity = 3;
  
  // Priority for processing (higher = more important)
  int32 priority = 4;
  
  // Version of the event schema
  string schema_version = 5;
  
  // Whether this event should be persisted
  bool persistent = 6;
  
  // TTL in seconds (0 = no expiration)
  int64 ttl_seconds = 7;
  
  // Routing hints for event processing
  repeated string routing_keys = 8;
}

// EventSource identifies where an event originated
message EventSource {
  // Source type (e.g., "ebpf", "systemd", "journald", "kubernetes")
  string type = 1;
  
  // Specific collector or component name
  string collector = 2;
  
  // Node where event was collected
  string node = 3;
  
  // Cluster identifier
  string cluster = 4;
  
  // Version of the source/collector
  string version = 5;
  
  // Additional source metadata
  map<string, string> metadata = 10;
}

// EntityContext identifies the entity (process, container, pod, etc.) associated with an event
message EntityContext {
  // Entity type
  EntityType type = 1;
  
  // Primary identifier for the entity
  string id = 2;
  
  // Human-readable name
  string name = 3;
  
  // Namespace (for Kubernetes entities)
  string namespace = 4;
  
  // Parent entity reference
  EntityReference parent = 5;
  
  // Process information (if applicable)
  ProcessInfo process = 10;
  
  // Container information (if applicable)
  ContainerInfo container = 11;
  
  // Pod information (if applicable)
  PodInfo pod = 12;
  
  // Node information (if applicable)
  NodeInfo node = 13;
}

// EntityReference is a lightweight reference to another entity
message EntityReference {
  EntityType type = 1;
  string id = 2;
  string name = 3;
}

// ProcessInfo contains process-specific information
message ProcessInfo {
  uint32 pid = 1;
  uint32 ppid = 2;
  string comm = 3;
  string exe = 4;
  string cwd = 5;
  repeated string args = 6;
  map<string, string> env = 7;
  uint32 uid = 8;
  uint32 gid = 9;
  string cgroup = 10;
}

// ContainerInfo contains container-specific information
message ContainerInfo {
  string id = 1;
  string name = 2;
  string image = 3;
  string runtime = 4;
  map<string, string> labels = 5;
}

// PodInfo contains Kubernetes pod information
message PodInfo {
  string uid = 1;
  string name = 2;
  string namespace = 3;
  map<string, string> labels = 4;
  map<string, string> annotations = 5;
  repeated ContainerInfo containers = 6;
}

// NodeInfo contains node-level information
message NodeInfo {
  string name = 1;
  string uid = 2;
  map<string, string> labels = 3;
  string kernel_version = 4;
  string os_image = 5;
}

// CorrelationContext links related events together
message CorrelationContext {
  // Correlation ID linking related events
  string correlation_id = 1;
  
  // Trace ID for distributed tracing
  string trace_id = 2;
  
  // Span ID for distributed tracing
  string span_id = 3;
  
  // Parent span ID
  string parent_span_id = 4;
  
  // Causality chain (event IDs that led to this event)
  repeated string caused_by = 5;
  
  // Related events
  repeated string related_events = 6;
  
  // Session or transaction ID
  string session_id = 7;
  
  // User or request ID
  string user_id = 8;
}

// QualityMetadata provides confidence and quality indicators
message QualityMetadata {
  // Confidence score (0.0 - 1.0)
  float confidence = 1;
  
  // Sampling rate if this event was sampled
  float sampling_rate = 2;
  
  // Whether this event was dropped/filtered elsewhere
  bool partial = 3;
  
  // Data quality indicators
  repeated string quality_flags = 4;
  
  // Processing latency in microseconds
  int64 processing_latency_us = 5;
}

// AttributeValue can hold different types of values
message AttributeValue {
  oneof value {
    string string_value = 1;
    int64 int_value = 2;
    double double_value = 3;
    bool bool_value = 4;
    bytes bytes_value = 5;
    google.protobuf.Timestamp timestamp_value = 6;
    google.protobuf.Struct struct_value = 7;
  }
}

// Event type enumerations
enum EventCategory {
  CATEGORY_UNKNOWN = 0;
  CATEGORY_NETWORK = 1;
  CATEGORY_MEMORY = 2;
  CATEGORY_CPU = 3;
  CATEGORY_IO = 4;
  CATEGORY_SYSTEM = 5;
  CATEGORY_SECURITY = 6;
  CATEGORY_APPLICATION = 7;
  CATEGORY_INFRASTRUCTURE = 8;
  CATEGORY_OBSERVABILITY = 9;
}

enum EventSeverity {
  SEVERITY_UNKNOWN = 0;
  SEVERITY_DEBUG = 1;
  SEVERITY_INFO = 2;
  SEVERITY_WARNING = 3;
  SEVERITY_ERROR = 4;
  SEVERITY_CRITICAL = 5;
}

enum EntityType {
  ENTITY_UNKNOWN = 0;
  ENTITY_PROCESS = 1;
  ENTITY_THREAD = 2;
  ENTITY_CONTAINER = 3;
  ENTITY_POD = 4;
  ENTITY_SERVICE = 5;
  ENTITY_NODE = 6;
  ENTITY_CLUSTER = 7;
  ENTITY_NAMESPACE = 8;
  ENTITY_DEPLOYMENT = 9;
  ENTITY_DAEMONSET = 10;
  ENTITY_STATEFULSET = 11;
  ENTITY_JOB = 12;
  ENTITY_CRONJOB = 13;
}

// Strongly typed event data structures

// NetworkEvent represents network-related events
message NetworkEvent {
  string protocol = 1;
  string src_ip = 2;
  uint32 src_port = 3;
  string dst_ip = 4;
  uint32 dst_port = 5;
  uint64 bytes_sent = 6;
  uint64 bytes_received = 7;
  uint64 packets_sent = 8;
  uint64 packets_received = 9;
  uint64 latency_ns = 10;
  string state = 11;
  map<string, string> metadata = 20;
}

// MemoryEvent represents memory-related events
message MemoryEvent {
  string operation = 1;  // alloc, free, oom, etc.
  uint64 size_bytes = 2;
  uint64 address = 3;
  uint64 rss_bytes = 4;
  uint64 vms_bytes = 5;
  uint64 shared_bytes = 6;
  string allocator = 7;
  repeated string stack_trace = 8;
  map<string, string> metadata = 20;
}

// CPUEvent represents CPU-related events
message CPUEvent {
  float usage_percent = 1;
  uint64 user_time_ns = 2;
  uint64 system_time_ns = 3;
  uint64 wait_time_ns = 4;
  uint32 cpu_core = 5;
  uint64 throttled_time_ns = 6;
  uint64 throttled_periods = 7;
  map<string, string> metadata = 20;
}

// IOEvent represents I/O operations
message IOEvent {
  string operation = 1;  // read, write, open, close, etc.
  string path = 2;
  uint32 fd = 3;
  uint64 size_bytes = 4;
  uint64 offset = 5;
  uint64 latency_ns = 6;
  string device = 7;
  string filesystem = 8;
  map<string, string> metadata = 20;
}

// SystemEvent represents system-level events
message SystemEvent {
  string subsystem = 1;  // kernel, systemd, etc.
  string event_type = 2;
  string message = 3;
  map<string, string> parameters = 4;
  repeated string stack_trace = 5;
  map<string, string> metadata = 20;
}

// ProcessEvent represents process lifecycle events
message ProcessEvent {
  string event_type = 1;  // start, exit, signal, etc.
  uint32 pid = 2;
  uint32 ppid = 3;
  int32 exit_code = 4;
  int32 signal = 5;
  string reason = 6;
  map<string, string> metadata = 20;
}

// ContainerEvent represents container lifecycle events
message ContainerEvent {
  string event_type = 1;  // create, start, stop, die, etc.
  string container_id = 2;
  string image = 3;
  string runtime = 4;
  int32 exit_code = 5;
  string reason = 6;
  map<string, string> metadata = 20;
}

// KubernetesEvent represents Kubernetes resource events
message KubernetesEvent {
  string resource_type = 1;
  string resource_name = 2;
  string namespace = 3;
  string event_type = 4;  // added, modified, deleted
  string reason = 5;
  string message = 6;
  map<string, string> object_meta = 7;
  google.protobuf.Struct object_spec = 8;
  google.protobuf.Struct object_status = 9;
  map<string, string> metadata = 20;
}

// LogEvent represents log entries from various sources
message LogEvent {
  string level = 1;
  string message = 2;
  string logger = 3;
  string source_file = 4;
  uint32 line_number = 5;
  map<string, string> fields = 6;
  repeated string stack_trace = 7;
  map<string, string> metadata = 20;
}

// MetricEvent represents metrics/measurements
message MetricEvent {
  string name = 1;
  oneof value {
    int64 gauge = 2;
    int64 counter = 3;
    HistogramValue histogram = 4;
    SummaryValue summary = 5;
  }
  map<string, string> labels = 6;
  string unit = 7;
  string description = 8;
  map<string, string> metadata = 20;
}

// TraceEvent represents distributed tracing spans
message TraceEvent {
  string operation = 1;
  string service = 2;
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  uint64 duration_ns = 5;
  string status = 6;
  map<string, AttributeValue> attributes = 7;
  repeated TraceLink links = 8;
  map<string, string> metadata = 20;
}

// Supporting types for metrics
message HistogramValue {
  repeated double buckets = 1;
  repeated uint64 counts = 2;
  uint64 count = 3;
  double sum = 4;
}

message SummaryValue {
  uint64 count = 1;
  double sum = 2;
  repeated Quantile quantiles = 3;
}

message Quantile {
  double quantile = 1;
  double value = 2;
}

// TraceLink represents relationships between spans
message TraceLink {
  string trace_id = 1;
  string span_id = 2;
  string relationship = 3;
  map<string, AttributeValue> attributes = 4;
}

// EventBatch for efficient bulk operations
message EventBatch {
  repeated UnifiedEvent events = 1;
  
  // Batch metadata
  string batch_id = 2;
  google.protobuf.Timestamp created_at = 3;
  string source = 4;
  uint32 dropped_events = 5;
  
  // Compression hint for transport
  CompressionType compression = 6;
}

enum CompressionType {
  COMPRESSION_NONE = 0;
  COMPRESSION_GZIP = 1;
  COMPRESSION_ZSTD = 2;
  COMPRESSION_LZ4 = 3;
  COMPRESSION_SNAPPY = 4;
}

// Service definitions for event streaming
service EventService {
  // Send a single event
  rpc SendEvent(UnifiedEvent) returns (EventResponse);
  
  // Send a batch of events
  rpc SendEventBatch(EventBatch) returns (EventResponse);
  
  // Stream events (client streaming)
  rpc StreamEvents(stream UnifiedEvent) returns (EventResponse);
  
  // Bidirectional streaming for real-time processing
  rpc ProcessEventStream(stream UnifiedEvent) returns (stream EventResponse);
}

message EventResponse {
  bool success = 1;
  string message = 2;
  string event_id = 3;
  repeated string errors = 4;
  map<string, string> metadata = 5;
}