---
apiVersion: v1
kind: ConfigMap
metadata:
  name: neo4j-config
  namespace: tapio
data:
  neo4j.conf: |
    # Memory configuration
    server.memory.heap.initial_size=512m
    server.memory.heap.max_size=2G
    server.memory.pagecache.size=512m
    
    # Network connector configuration
    server.default_listen_address=0.0.0.0
    server.bolt.enabled=true
    server.bolt.listen_address=0.0.0.0:7687
    server.http.enabled=true
    server.http.listen_address=0.0.0.0:7474
    
    # Security
    dbms.security.auth_enabled=true
    
    # Logging
    server.directories.logs=/logs
    
    # Performance
    db.tx_log.rotation.retention_policy=1 days
    
    # Cluster settings (for future scaling)
    initial.dbms.default_primaries_count=1
    initial.dbms.default_secondaries_count=0
    
    # Query performance
    db.query_cache_size=100
    cypher.lenient_create_relationship=true

---
apiVersion: v1
kind: Secret
metadata:
  name: neo4j-auth
  namespace: tapio
type: Opaque
stringData:
  NEO4J_AUTH: "neo4j/tapiopass123"

---
apiVersion: v1
kind: Service
metadata:
  name: neo4j
  namespace: tapio
  labels:
    app: neo4j
spec:
  type: ClusterIP
  selector:
    app: neo4j
  ports:
  - name: bolt
    port: 7687
    targetPort: 7687
  - name: http
    port: 7474
    targetPort: 7474

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: neo4j-data
  namespace: tapio
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neo4j
  namespace: tapio
  labels:
    app: neo4j
spec:
  replicas: 1
  selector:
    matchLabels:
      app: neo4j
  template:
    metadata:
      labels:
        app: neo4j
    spec:
      containers:
      - name: neo4j
        image: neo4j:5.15-community
        imagePullPolicy: Always
        ports:
        - containerPort: 7687
          name: bolt
        - containerPort: 7474
          name: http
        env:
        - name: NEO4J_AUTH
          valueFrom:
            secretKeyRef:
              name: neo4j-auth
              key: NEO4J_AUTH
        - name: NEO4J_PLUGINS
          value: '["apoc", "graph-data-science"]'
        - name: NEO4J_server_memory_heap_max__size
          value: "2G"
        - name: NEO4J_server_memory_heap_initial__size
          value: "512m"
        - name: NEO4J_server_memory_pagecache_size
          value: "512m"
        volumeMounts:
        - name: data
          mountPath: /data
        - name: logs
          mountPath: /logs
        - name: config
          mountPath: /var/lib/neo4j/conf/neo4j.conf
          subPath: neo4j.conf
        livenessProbe:
          tcpSocket:
            port: 7687
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 7687
          initialDelaySeconds: 15
          periodSeconds: 5
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: neo4j-data
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: neo4j-config

---
apiVersion: batch/v1
kind: Job
metadata:
  name: neo4j-init
  namespace: tapio
spec:
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-neo4j
        image: busybox:1.35
        command: ['sh', '-c']
        args:
          - |
            echo "Waiting for Neo4j to be ready..."
            until nc -z neo4j.tapio.svc.cluster.local 7687; do
              echo "Neo4j is not ready yet..."
              sleep 5
            done
            echo "Neo4j is ready!"
            sleep 10
      containers:
      - name: init-schema
        image: neo4j:5.15-community
        command: ['cypher-shell']
        args:
          - -a
          - neo4j://neo4j.tapio.svc.cluster.local:7687
          - -u
          - neo4j
          - -p
          - tapiopass123
          - --format
          - plain
          - |
            CREATE CONSTRAINT pod_unique IF NOT EXISTS ON (p:Pod) ASSERT (p.name, p.namespace) IS UNIQUE;
            CREATE CONSTRAINT service_unique IF NOT EXISTS ON (s:Service) ASSERT (s.name, s.namespace) IS UNIQUE;
            CREATE CONSTRAINT deployment_unique IF NOT EXISTS ON (d:Deployment) ASSERT (d.name, d.namespace) IS UNIQUE;
            CREATE CONSTRAINT node_unique IF NOT EXISTS ON (n:Node) ASSERT n.name IS UNIQUE;
            CREATE INDEX event_timestamp IF NOT EXISTS FOR (e:Event) ON (e.timestamp);
            CREATE INDEX pod_namespace IF NOT EXISTS FOR (p:Pod) ON (p.namespace);
            CREATE INDEX service_namespace IF NOT EXISTS FOR (s:Service) ON (s.namespace);
            :exit