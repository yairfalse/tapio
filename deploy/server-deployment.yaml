apiVersion: apps/v1
kind: Deployment
metadata:
  name: tapio-server
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-server
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: tapio
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2                          # For high availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: tapio-server
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tapio-server
        app.kubernetes.io/component: server
        app.kubernetes.io/part-of: tapio
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9091"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: tapio-server
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
      
      containers:
        - name: tapio-server
          image: tapio/server:1.0.0
          imagePullPolicy: IfNotPresent
          
          # Command and arguments
          command: ["/tapio-server"]
          args:
            - "--config=/etc/tapio/server.yaml"
            - "--port=9090"
            - "--address=0.0.0.0"
            - "--log-level=info"
          
          # Environment variables
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          
          # Security context for container
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          
          # Resource limits (higher for server processing)
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"              # 10% CPU
            limits:
              memory: "500Mi"          # Hard limit
              cpu: "500m"              # 50% CPU limit
          
          # Volume mounts
          volumeMounts:
            # Configuration
            - name: config
              mountPath: /etc/tapio
              readOnly: true
            
            # Data persistence
            - name: data
              mountPath: /var/lib/tapio
            
            # Temporary directory
            - name: tmp
              mountPath: /tmp
          
          # Probes
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9091
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /readyz
              port: 9091
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          
          # Startup probe
          startupProbe:
            httpGet:
              path: /healthz
              port: 9091
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 20
          
          # Ports
          ports:
            - name: grpc
              containerPort: 9090
              protocol: TCP
            - name: metrics
              containerPort: 9091
              protocol: TCP
      
      # Termination settings
      terminationGracePeriodSeconds: 60   # Allow time for graceful shutdown
      
      # Volumes
      volumes:
        # Configuration
        - name: config
          configMap:
            name: tapio-server-config
            defaultMode: 0644
        
        # Data persistence
        - name: data
          emptyDir:
            sizeLimit: 1Gi
        
        # Temporary directory
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi

---
# ConfigMap for server configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: tapio-server-config
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-server
    app.kubernetes.io/component: config
    app.kubernetes.io/part-of: tapio
data:
  server.yaml: |
    # Tapio Server Configuration
    server:
      address: "0.0.0.0"
      port: 9090
      tls_enabled: false
      max_concurrent_streams: 1000
      max_events_per_sec: 165000
      max_batch_size: 1000
    
    correlation:
      enabled: true
      buffer_size: 100000
      analysis_window: "5m"
      max_correlation_depth: 10
    
    metrics:
      prometheus_enabled: true
      prometheus_port: 9091
      collection_interval: "15s"
    
    resources:
      max_memory_mb: 500
      max_cpu_milli: 500
    
    logging:
      level: "info"
      format: "json"

---
# ServiceAccount for server
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tapio-server
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-server
    app.kubernetes.io/component: rbac
    app.kubernetes.io/part-of: tapio

---
# ClusterRole for server (minimal permissions)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tapio-server
  labels:
    app.kubernetes.io/name: tapio-server
    app.kubernetes.io/component: rbac
    app.kubernetes.io/part-of: tapio
rules:
  # Read access to cluster metadata for correlation
  - apiGroups: [""]
    resources: ["nodes", "namespaces"]
    verbs: ["get", "list"]

---
# ClusterRoleBinding for server
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tapio-server
  labels:
    app.kubernetes.io/name: tapio-server
    app.kubernetes.io/component: rbac
    app.kubernetes.io/part-of: tapio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tapio-server
subjects:
  - kind: ServiceAccount
    name: tapio-server
    namespace: tapio-system

---
# Service for server
apiVersion: v1
kind: Service
metadata:
  name: tapio-server
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-server
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: tapio
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: tapio-server
    app.kubernetes.io/component: server
  ports:
    - name: grpc
      port: 9090
      targetPort: 9090
      protocol: TCP

---
# Service for server metrics
apiVersion: v1
kind: Service
metadata:
  name: tapio-server-metrics
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-server
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: tapio
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9091"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: tapio-server
    app.kubernetes.io/component: server
  ports:
    - name: metrics
      port: 9091
      targetPort: 9091
      protocol: TCP

---
# Horizontal Pod Autoscaler for server
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tapio-server
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-server
    app.kubernetes.io/component: autoscaler
    app.kubernetes.io/part-of: tapio
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tapio-server
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60

---
# PodDisruptionBudget for server
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: tapio-server
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-server
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: tapio
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: tapio-server
      app.kubernetes.io/component: server