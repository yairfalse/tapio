apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: tapio-collector
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-collector
    app.kubernetes.io/component: collector
    app.kubernetes.io/part-of: tapio
    app.kubernetes.io/version: "1.0.0"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: tapio-collector
      app.kubernetes.io/component: collector
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 10%
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tapio-collector
        app.kubernetes.io/component: collector
        app.kubernetes.io/part-of: tapio
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: tapio-collector
      hostPID: true                    # Required for eBPF process monitoring
      hostNetwork: true                # Required for network monitoring
      dnsPolicy: ClusterFirstWithHostNet
      
      # Security context
      securityContext:
        runAsNonRoot: false            # eBPF requires root privileges
        runAsUser: 0
        fsGroup: 0
      
      # Priority for system-critical DaemonSet
      priorityClassName: system-node-critical
      
      # Tolerations to run on all nodes
      tolerations:
        - operator: Exists
          effect: NoSchedule
        - operator: Exists
          effect: NoExecute
        - key: CriticalAddonsOnly
          operator: Exists
      
      containers:
        - name: tapio-collector
          image: tapio/collector:1.0.0
          imagePullPolicy: IfNotPresent
          
          # Command and arguments
          command: ["/tapio-collector"]
          args:
            - "--config=/etc/tapio/collector.yaml"
            - "--server=tapio-server:9090"
            - "--log-level=info"
          
          # Environment variables
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: TAPIO_COLLECTOR_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          
          # Security context for container
          securityContext:
            privileged: true            # Required for eBPF and system monitoring
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: true
            capabilities:
              add:
                - SYS_ADMIN            # Required for eBPF
                - NET_ADMIN            # Required for network monitoring
                - SYS_RESOURCE         # Required for resource monitoring
                - SYS_PTRACE           # Required for process monitoring
              drop:
                - ALL
          
          # Resource limits (lightweight for DaemonSet)
          resources:
            requests:
              memory: "64Mi"
              cpu: "5m"                # 0.5% CPU
            limits:
              memory: "100Mi"          # Hard limit to prevent OOM
              cpu: "10m"               # 1% CPU limit
          
          # Volume mounts
          volumeMounts:
            # Configuration
            - name: config
              mountPath: /etc/tapio
              readOnly: true
            
            # Required for eBPF
            - name: sys
              mountPath: /sys
              readOnly: true
            - name: proc
              mountPath: /proc
              readOnly: true
            - name: debugfs
              mountPath: /sys/kernel/debug
            - name: modules
              mountPath: /lib/modules
              readOnly: true
            - name: bpffs
              mountPath: /sys/fs/bpf
              mountPropagation: Bidirectional
            
            # Required for systemd monitoring
            - name: systemd
              mountPath: /run/systemd
              readOnly: true
            - name: dbus
              mountPath: /var/run/dbus
              readOnly: true
            
            # Required for container runtime monitoring
            - name: containerd
              mountPath: /run/containerd
              readOnly: true
            - name: docker
              mountPath: /var/run/docker.sock
              readOnly: true
            
            # Temporary directory
            - name: tmp
              mountPath: /tmp
          
          # Probes
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          
          # Startup probe for slower initialization
          startupProbe:
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 20
          
          # Ports
          ports:
            - name: health
              containerPort: 8081
              protocol: TCP
      
      # Termination settings
      terminationGracePeriodSeconds: 30
      
      # Volumes
      volumes:
        # Configuration
        - name: config
          configMap:
            name: tapio-collector-config
            defaultMode: 0644
        
        # System volumes for monitoring
        - name: sys
          hostPath:
            path: /sys
            type: Directory
        - name: proc
          hostPath:
            path: /proc
            type: Directory
        - name: debugfs
          hostPath:
            path: /sys/kernel/debug
            type: Directory
        - name: modules
          hostPath:
            path: /lib/modules
            type: Directory
        - name: bpffs
          hostPath:
            path: /sys/fs/bpf
            type: DirectoryOrCreate
        
        # systemd monitoring
        - name: systemd
          hostPath:
            path: /run/systemd
            type: Directory
        - name: dbus
          hostPath:
            path: /var/run/dbus
            type: Directory
        
        # Container runtime sockets
        - name: containerd
          hostPath:
            path: /run/containerd
            type: Directory
        - name: docker
          hostPath:
            path: /var/run/docker.sock
            type: Socket
        
        # Temporary directory
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi

---
# ConfigMap for collector configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: tapio-collector-config
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-collector
    app.kubernetes.io/component: config
    app.kubernetes.io/part-of: tapio
data:
  collector.yaml: |
    # Tapio Collector Configuration for Kubernetes DaemonSet
    collector:
      enabled_collectors: ["ebpf", "k8s", "systemd"]
      sampling_rate: 1.0
      max_events_per_sec: 10000
      buffer_size: 10000
    
    grpc:
      server_endpoints: ["tapio-server:9090"]
      tls_enabled: false
      max_batch_size: 100
      batch_timeout: "100ms"
      reconnect_enabled: true
      compression: "lz4"
    
    resources:
      max_memory_mb: 100
      max_cpu_milli: 10
    
    pipeline:
      enable_filtering: true
      filter_config:
        min_severity: "low"
    
    collectors:
      ebpf:
        enabled: true
        enable_network: true
        enable_memory: true
        enable_process: true
      k8s:
        enabled: true
        in_cluster: true
        exclude_system_namespaces: true
      systemd:
        enabled: true
        exclude_system: true
    
    health:
      enabled: true
      port: 8081
      metrics_enabled: true
    
    logging:
      level: "info"
      format: "json"

---
# ServiceAccount for collector
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tapio-collector
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-collector
    app.kubernetes.io/component: rbac
    app.kubernetes.io/part-of: tapio

---
# ClusterRole for collector
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tapio-collector
  labels:
    app.kubernetes.io/name: tapio-collector
    app.kubernetes.io/component: rbac
    app.kubernetes.io/part-of: tapio
rules:
  # Read access to cluster resources for monitoring
  - apiGroups: [""]
    resources: ["nodes", "pods", "services", "endpoints", "events"]
    verbs: ["get", "list", "watch"]
  
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
    verbs: ["get", "list", "watch"]
  
  - apiGroups: ["metrics.k8s.io"]
    resources: ["nodes", "pods"]
    verbs: ["get", "list"]
  
  # Access to node metrics
  - apiGroups: [""]
    resources: ["nodes/metrics", "nodes/stats", "nodes/proxy"]
    verbs: ["get"]

---
# ClusterRoleBinding for collector
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tapio-collector
  labels:
    app.kubernetes.io/name: tapio-collector
    app.kubernetes.io/component: rbac
    app.kubernetes.io/part-of: tapio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tapio-collector
subjects:
  - kind: ServiceAccount
    name: tapio-collector
    namespace: tapio-system

---
# Service for collector metrics
apiVersion: v1
kind: Service
metadata:
  name: tapio-collector-metrics
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-collector
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: tapio
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8081"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for DaemonSet
  selector:
    app.kubernetes.io/name: tapio-collector
    app.kubernetes.io/component: collector
  ports:
    - name: metrics
      port: 8081
      targetPort: 8081
      protocol: TCP