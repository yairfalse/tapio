name: Smart CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pull-requests: read

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      cli: ${{ steps.changes.outputs.cli }}
      ebpf: ${{ steps.changes.outputs.ebpf }}
      simple: ${{ steps.changes.outputs.simple }}
      k8s: ${{ steps.changes.outputs.k8s }}
      metrics: ${{ steps.changes.outputs.metrics }}
      output: ${{ steps.changes.outputs.output }}
      health: ${{ steps.changes.outputs.health }}
      types: ${{ steps.changes.outputs.types }}
      core: ${{ steps.changes.outputs.core }}
      docs: ${{ steps.changes.outputs.docs }}
      ci: ${{ steps.changes.outputs.ci }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            cli:
              - 'internal/cli/**'
              - 'cmd/tapio/**'
            ebpf:
              - 'pkg/ebpf/**'
              - 'ebpf/**'
            simple:
              - 'pkg/simple/**'
            k8s:
              - 'pkg/k8s/**'
            metrics:
              - 'pkg/metrics/**'
            output:
              - 'internal/output/**'
              - 'pkg/output/**'
            health:
              - 'pkg/health/**'
            types:
              - 'pkg/types/**'
            core:
              - 'go.mod'
              - 'go.sum'
              - 'Makefile'
              - 'Taskfile.yml'
            docs:
              - 'docs/**'
              - '*.md'
            ci:
              - '.github/**'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.cli == 'true' ||
      needs.changes.outputs.ebpf == 'true' ||
      needs.changes.outputs.simple == 'true' ||
      needs.changes.outputs.k8s == 'true' ||
      needs.changes.outputs.metrics == 'true' ||
      needs.changes.outputs.output == 'true' ||
      needs.changes.outputs.health == 'true' ||
      needs.changes.outputs.types == 'true' ||
      needs.changes.outputs.core == 'true' ||
      needs.changes.outputs.ci == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m
          
      - name: golangci-lint with eBPF
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m --build-tags=ebpf
        continue-on-error: true

  test-cli:
    name: Test CLI
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.cli == 'true' ||
      needs.changes.outputs.types == 'true' ||
      needs.changes.outputs.core == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          
      - name: Test CLI components
        run: go test -v -race -coverprofile=cli-coverage.txt ./internal/cli/... ./cmd/tapio/...

  test-ebpf:
    name: Test eBPF
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.ebpf == 'true' ||
      needs.changes.outputs.types == 'true' ||
      needs.changes.outputs.core == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          
      - name: Install eBPF dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libbpf-dev clang llvm
          
      - name: Test eBPF components (without eBPF)
        run: go test -v -race -coverprofile=ebpf-coverage.txt ./pkg/ebpf/...
        
      - name: Test eBPF components (with eBPF)
        run: |
          sudo -E go test -v -race -tags ebpf -coverprofile=ebpf-coverage-full.txt ./pkg/ebpf/...
        continue-on-error: true

  test-simple:
    name: Test Simple Checker
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.simple == 'true' ||
      needs.changes.outputs.health == 'true' ||
      needs.changes.outputs.types == 'true' ||
      needs.changes.outputs.core == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          
      - name: Test Simple Checker
        run: go test -v -race -coverprofile=simple-coverage.txt ./pkg/simple/... ./pkg/health/...

  test-k8s:
    name: Test K8s Integration
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.k8s == 'true' ||
      needs.changes.outputs.types == 'true' ||
      needs.changes.outputs.core == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          
      - name: Test K8s components
        run: go test -v -race -coverprofile=k8s-coverage.txt ./pkg/k8s/...

  test-metrics:
    name: Test Metrics
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.metrics == 'true' ||
      needs.changes.outputs.types == 'true' ||
      needs.changes.outputs.core == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          
      - name: Test Metrics components
        run: go test -v -race -coverprofile=metrics-coverage.txt ./pkg/metrics/...

  test-output:
    name: Test Output
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.output == 'true' ||
      needs.changes.outputs.types == 'true' ||
      needs.changes.outputs.core == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          
      - name: Test Output components
        run: go test -v -race -coverprofile=output-coverage.txt ./internal/output/... ./pkg/output/...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [changes, lint]
    if: |
      always() &&
      (needs.lint.result == 'success' || needs.lint.result == 'skipped') &&
      (needs.changes.outputs.cli == 'true' ||
       needs.changes.outputs.ebpf == 'true' ||
       needs.changes.outputs.simple == 'true' ||
       needs.changes.outputs.k8s == 'true' ||
       needs.changes.outputs.metrics == 'true' ||
       needs.changes.outputs.output == 'true' ||
       needs.changes.outputs.health == 'true' ||
       needs.changes.outputs.types == 'true' ||
       needs.changes.outputs.core == 'true')
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          
      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          output_name=tapio-${{ matrix.os }}-${{ matrix.arch }}
          if [ "${{ matrix.os }}" = "windows" ]; then
            output_name=${output_name}.exe
          fi
          mkdir -p build
          go build -ldflags="-s -w" -o ./build/${output_name} ./cmd/tapio/main.go
          
          # Build with eBPF support for Linux only
          if [ "${{ matrix.os }}" = "linux" ]; then
            go build -tags ebpf -ldflags="-s -w" -o ./build/${output_name}-ebpf ./cmd/tapio/main.go
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tapio-${{ matrix.os }}-${{ matrix.arch }}
          path: ./build/tapio*

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.cli == 'true' ||
      needs.changes.outputs.ebpf == 'true' ||
      needs.changes.outputs.simple == 'true' ||
      needs.changes.outputs.k8s == 'true' ||
      needs.changes.outputs.metrics == 'true' ||
      needs.changes.outputs.output == 'true' ||
      needs.changes.outputs.health == 'true' ||
      needs.changes.outputs.types == 'true' ||
      needs.changes.outputs.core == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: |
      always() &&
      needs.build.result == 'success' &&
      (needs.changes.outputs.cli == 'true' ||
       needs.changes.outputs.ebpf == 'true' ||
       needs.changes.outputs.simple == 'true' ||
       needs.changes.outputs.k8s == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true
          
      - name: Run integration tests
        run: go test -v -tags=integration ./test/integration/...