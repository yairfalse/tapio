# Tapio CI/CD - Simple & Fast
# Container-first build with proper linting and architecture enforcement

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===================================
  # ENFORCEMENT - Architecture & Quality (CRITICAL)
  # ===================================
  enforcement:
    name: Architecture Enforcement (CRITICAL)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Install buf
        run: |
          go install github.com/bufbuild/buf/cmd/buf@latest
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Generate Proto Files
        run: make proto

      - name: Format check
        run: |
          if [ "$(gofmt -l . | grep -v vendor | wc -l)" -gt 0 ]; then
            echo "Code not formatted:"
            gofmt -l . | grep -v vendor
            exit 1
          fi

      - name: Go vet
        run: go vet $(go list ./... | grep -v '/scripts' | grep -v 'pkg/collectors/ebpf')

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m --verbose

      - name: Architecture enforcement check
        run: |
          echo "🏗️ Running comprehensive architecture enforcement..."
          make ci-enforcement-only

  # ===================================
  # TEST - All Components in Parallel
  # ===================================  
  # ===================================
  # LINT - Code Quality  
  # ===================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: [enforcement]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Install buf
        run: |
          go install github.com/bufbuild/buf/cmd/buf@latest
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Generate Proto Files
        run: make proto

      - name: Format check
        run: |
          if [ "$(gofmt -l . | grep -v vendor | wc -l)" -gt 0 ]; then
            echo "Code not formatted:"
            gofmt -l . | grep -v vendor
            exit 1
          fi

      - name: Go vet
        run: go vet $(go list ./... | grep -v '/scripts' | grep -v 'pkg/collectors/ebpf')

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m --verbose

  # ===================================
  # TEST - All Components in Parallel
  # ===================================  
  test:
    name: Test Components
    runs-on: ubuntu-latest
    needs: [enforcement]
    strategy:
      matrix:
        component:
          - pkg/domain
          - pkg/collectors/ebpf
          - pkg/collectors/k8s  
          - pkg/collectors/systemd
          - pkg/collectors/journald
          - pkg/intelligence/correlation
          - pkg/integrations/otel
          - pkg/integrations/prometheus
          - pkg/interfaces/server
          - pkg/interfaces/cli
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Install buf
        run: |
          go install github.com/bufbuild/buf/cmd/buf@latest
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Generate Proto Files
        run: make proto

      - name: Test ${{ matrix.component }}
        run: |
          if [ -d "${{ matrix.component }}" ]; then
            cd ${{ matrix.component }}
            go test -v -race -coverprofile=coverage.out ./...
            go tool cover -func=coverage.out
          else
            echo "Component ${{ matrix.component }} not found, skipping"
          fi

  # ===================================
  # BUILD - Docker Images in Parallel
  # ===================================
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [enforcement, lint, test]
    strategy:
      matrix:
        component:
          - name: tapio-server
            dockerfile: cmd/tapio-server/Dockerfile
            context: .
          - name: tapio-collector  
            dockerfile: cmd/tapio-collector/Dockerfile
            context: .
          - name: tapio-cli
            dockerfile: cmd/tapio-cli/Dockerfile
            context: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.component.name }}
        run: |
          if [ -f "${{ matrix.component.dockerfile }}" ]; then
            docker build \
              -f ${{ matrix.component.dockerfile }} \
              -t ${{ matrix.component.name }}:latest \
              ${{ matrix.component.context }}
            echo "✅ Built ${{ matrix.component.name }}"
          else
            echo "⚠️  Dockerfile not found: ${{ matrix.component.dockerfile }}"
          fi

      - name: Test ${{ matrix.component.name }} image
        run: |
          if docker images | grep -q "${{ matrix.component.name }}"; then
            docker run --rm ${{ matrix.component.name }}:latest --help || \
            docker run --rm ${{ matrix.component.name }}:latest version || \
            echo "Image runs but no help/version command"
          fi

  # ===================================
  # SECURITY - Security & Vulnerability Scan
  # ===================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [enforcement]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Install buf
        run: |
          go install github.com/bufbuild/buf/cmd/buf@latest
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Generate Proto Files
        run: make proto

      - name: Security scan with gosec
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-report.json ./...

      - name: Dependency vulnerability scan
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # ===================================
  # RELEASE - Push Images (main branch only)
  # ===================================
  release:
    name: Release Images
    runs-on: ubuntu-latest
    needs: [enforcement, lint, test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component:
          - name: tapio-server
            dockerfile: cmd/tapio-server/Dockerfile
          - name: tapio-collector
            dockerfile: cmd/tapio-collector/Dockerfile
          - name: tapio-cli
            dockerfile: cmd/tapio-cli/Dockerfile
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component.name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.component.name }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.component.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===================================
  # SUMMARY - CI Status Summary
  # ===================================
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [enforcement, lint, test, build, security]
    if: always()
    steps:
      - name: CI Summary
        run: |
          echo "## 🚀 Tapio CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture Enforcement | ${{ needs.enforcement.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality & Linting | ${{ needs.lint.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.enforcement.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
            echo "🎉 **All checks passed!** Architecture enforced, ready to merge." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  **Some checks failed.** Please review the errors above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi