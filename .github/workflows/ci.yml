name: Tapio CI Pipeline

on:
  push:
    branches: [main, develop, feat/*, fix/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.55.2'

jobs:
  # Quick validation checks that run in parallel
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [format, imports, todos, architecture]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install tools
        if: matrix.check == 'imports'
        run: go install golang.org/x/tools/cmd/goimports@latest
      
      - name: Run ${{ matrix.check }} check
        run: |
          case "${{ matrix.check }}" in
            format)
              echo "Checking formatting..."
              test -z "$(gofmt -l . | grep -v vendor)" || (gofmt -l . | grep -v vendor && exit 1)
              ;;
            imports)
              echo "Checking imports..."
              test -z "$(goimports -l . | grep -v vendor)" || (goimports -l . | grep -v vendor && exit 1)
              ;;
            todos)
              echo "Checking for TODOs..."
              ! grep -r "TODO\|FIXME\|XXX\|HACK" --include="*.go" . || exit 1
              ;;
            architecture)
              echo "Verifying architecture..."
              ./scripts/verify-architecture.sh
              ;;
          esac

  # Modular build jobs for each layer
  build-domain:
    name: Build Domain Layer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Build domain packages
        run: |
          echo "Building domain layer (Level 0)..."
          go build ./pkg/domain/...

  build-collectors:
    name: Build Collectors
    needs: build-domain
    runs-on: ubuntu-latest
    strategy:
      matrix:
        collector: [cni, dns, etcd, kubeapi, kubelet, systemd]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install eBPF dependencies
        if: matrix.collector == 'cni' || matrix.collector == 'etcd' || matrix.collector == 'systemd'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm libelf-dev
      
      - name: Build ${{ matrix.collector }} collector
        run: |
          echo "Building ${{ matrix.collector }} collector..."
          go build ./pkg/collectors/${{ matrix.collector }} || echo "::warning::${{ matrix.collector }} has build issues"
        continue-on-error: true

  build-intelligence:
    name: Build Intelligence Layer
    needs: [build-domain, build-collectors]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Build intelligence packages
        run: |
          echo "Building intelligence layer (Level 2)..."
          go build ./pkg/intelligence/...

  build-integrations:
    name: Build Integrations Layer
    needs: [build-domain, build-collectors, build-intelligence]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Build integration packages
        run: |
          echo "Building integrations layer (Level 3)..."
          go build ./pkg/integrations/...

  build-interfaces:
    name: Build Interfaces Layer
    needs: [build-domain, build-collectors, build-intelligence, build-integrations]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Build interface packages
        run: |
          echo "Building interfaces layer (Level 4)..."
          go build ./pkg/interfaces/...

  # Parallel testing strategy
  test:
    name: Test
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [domain, collectors, intelligence, integrations, interfaces]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Run tests for ${{ matrix.package }}
        run: |
          echo "Testing ${{ matrix.package }} packages..."
          go test -race -timeout 30s ./pkg/${{ matrix.package }}/... -coverprofile=${{ matrix.package }}.coverage
        continue-on-error: true
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}
          path: ${{ matrix.package }}.coverage

  # Coverage aggregation and validation
  coverage:
    name: Coverage Check
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true
      
      - name: Merge coverage reports
        run: |
          echo "mode: atomic" > coverage.out
          tail -q -n +2 *.coverage >> coverage.out
      
      - name: Check coverage threshold
        run: |
          go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//' | \
          awk '{if ($1 < 80) {print "Coverage is " $1 "%, minimum required is 80%"; exit 1} else {print "Coverage is " $1 "% - PASS"}}'

  # Lint in parallel with different configs
  lint:
    name: Lint
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
          sh -s -- -b $(go env GOPATH)/bin ${{ env.GOLANGCI_LINT_VERSION }}
      
      - name: Run golangci-lint
        run: golangci-lint run --timeout 5m

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Run gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-report.json ./... || true
      
      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            gosec-report.json

  # BPF compilation check
  bpf-check:
    name: BPF Compilation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install BPF tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm libelf-dev linux-headers-$(uname -r)
          go install github.com/cilium/ebpf/cmd/bpf2go@latest
      
      - name: Check BPF compilation
        run: |
          for dir in pkg/collectors/*/bpf; do
            if [ -f "$dir/generate.go" ]; then
              echo "Checking BPF in $dir..."
              cd "$dir" && go generate ./... || echo "::warning::BPF generation failed for $dir"
              cd -
            fi
          done

  # Final status check
  ci-status:
    name: CI Status
    needs: [validate, build-interfaces, test, coverage, lint, security, bpf-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
            echo "CI Pipeline failed"
            exit 1
          else
            echo "CI Pipeline passed"
          fi