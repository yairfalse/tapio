name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  # Quick format check - doesn't block other jobs
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Check formatting
        run: |
          # Only check tracked Go files
          unformatted=$(git ls-files '*.go' | xargs gofmt -l)
          if [ -n "$unformatted" ]; then
            echo "‚ùå Files need formatting:"
            echo "$unformatted"
            echo ""
            echo "Run: gofmt -w <file> or make fmt"
            exit 1
          fi
          echo "‚úÖ All files formatted"

  # Build check - runs in parallel with format
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Download dependencies
        run: go mod download
      
      - name: Build all packages
        run: |
          echo "üî® Building all packages..."
          go build ./...
          echo "‚úÖ Build successful"

  # Test - runs in parallel, doesn't wait for format
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Download dependencies
        run: go mod download
      
      - name: Run tests
        run: |
          echo "üß™ Running tests..."
          go test -race -short -timeout 5m ./...
          echo "‚úÖ Tests passed"

  # Basic lint - only essential checks
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Run go vet
        run: |
          echo "üîç Running go vet..."
          go vet ./...
          echo "‚úÖ No vet issues"

  # Summary job - provides clear status
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [format, build, test, lint]
    if: always()
    steps:
      - name: Summary
        env:
          FORMAT_RESULT: ${{ needs.format.result }}
          BUILD_RESULT: ${{ needs.build.result }}
          TEST_RESULT: ${{ needs.test.result }}
          LINT_RESULT: ${{ needs.lint.result }}
        run: |
          echo "## üöÄ CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Format status
          if [[ "$FORMAT_RESULT" == "success" ]]; then
            echo "| Format | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Format | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build status
          if [[ "$BUILD_RESULT" == "success" ]]; then
            echo "| Build | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Build | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test status
          if [[ "$TEST_RESULT" == "success" ]]; then
            echo "| Test | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Test | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Lint status
          if [[ "$LINT_RESULT" == "success" ]]; then
            echo "| Lint | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Lint | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Provide helpful feedback
          if [[ "$FORMAT_RESULT" == "failure" ]]; then
            echo "### üìù Format Issues" >> $GITHUB_STEP_SUMMARY
            echo "Run \`gofmt -w .\` locally to fix formatting" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$BUILD_RESULT" == "failure" ]]; then
            echo "### üî® Build Issues" >> $GITHUB_STEP_SUMMARY
            echo "Check the build logs for compilation errors" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$TEST_RESULT" == "failure" ]]; then
            echo "### üß™ Test Failures" >> $GITHUB_STEP_SUMMARY
            echo "Check the test logs for failing tests" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$LINT_RESULT" == "failure" ]]; then
            echo "### üîç Lint Issues" >> $GITHUB_STEP_SUMMARY
            echo "Check the lint logs for vet errors" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall status
          if [[ "$FORMAT_RESULT" == "success" && "$BUILD_RESULT" == "success" && "$TEST_RESULT" == "success" && "$LINT_RESULT" == "success" ]]; then
            echo "### ‚úÖ All checks passed!" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "### ‚ùå Some checks failed" >> $GITHUB_STEP_SUMMARY
            echo "See details above for what needs fixing" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi