package dns

import (
	"fmt"

	"github.com/yairfalse/tapio/pkg/observers"
	"github.com/yairfalse/tapio/pkg/observers/orchestrator"
	"go.uber.org/zap"
)

// init registers the DNS observer factory with the observer registry
func init() {
	// Register the DNS observer factory
	RegisterDNSObserver()
}

// RegisterDNSObserver registers the DNS observer factory with the orchestrator
func RegisterDNSObserver() {
	factory := func(name string, config *orchestrator.ObserverConfigData, logger *zap.Logger) (observers.Observer, error) {
		// Convert YAML config to DNS-specific config
		dnsConfig := DefaultConfig()

		// Apply configuration from YAML
		if config != nil {
			if config.BufferSize > 0 {
				dnsConfig.BufferSize = config.BufferSize
			}
			dnsConfig.EnableEBPF = config.EnableEBPF
			dnsConfig.ContainerIDExtraction = true // Enable for operational monitoring
			dnsConfig.ParseAnswers = true          // Enable for operational monitoring
		}

		// Create the DNS observer
		observer, err := NewObserver(name, dnsConfig)
		if err != nil {
			return nil, fmt.Errorf("failed to create DNS observer %s: %w", name, err)
		}

		return observer, nil
	}

	// Register the factory with the orchestrator
	orchestrator.RegisterObserverFactory("dns", factory)
}

// CreateDNSObserver creates a new DNS observer with the given configuration
func CreateDNSObserver(config *observers.ObserverConfig) (observers.Observer, error) {
	dnsConfig := DefaultConfig()

	if config != nil {
		dnsConfig.BufferSize = config.BufferSize
		if config.Labels != nil {
			dnsConfig.Labels = config.Labels
		}
	}

	return NewObserver("dns", dnsConfig)
}
