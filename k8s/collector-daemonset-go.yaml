---
# Tapio Collector DaemonSet with Real Go Binary
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: tapio-collector-go
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-collector
    app.kubernetes.io/component: collector-go
    app.kubernetes.io/part-of: tapio
    app.kubernetes.io/version: v1.0.0
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: tapio-collector
      app.kubernetes.io/component: collector-go
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tapio-collector
        app.kubernetes.io/component: collector-go
        app.kubernetes.io/part-of: tapio
        app.kubernetes.io/version: v1.0.0
      annotations:
        # Force restart on config changes
        checksum/config: "{{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}"
        # Security annotations
        container.apparmor.security.beta.kubernetes.io/tapio-collector: "unconfined"
        # Prometheus scraping
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: tapio-ebpf-privileged
      hostNetwork: true
      hostPID: true
      hostIPC: false
      dnsPolicy: ClusterFirstWithHostNet
      priorityClassName: tapio-high-priority
      
      # Ensure only one pod per node
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values: ["linux"]
              - key: kubernetes.io/arch
                operator: In
                values: ["amd64", "arm64"]
      
      # Tolerations for system nodes
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
      - key: CriticalAddonsOnly
        operator: Exists
      - key: node.kubernetes.io/not-ready
        effect: NoExecute
        tolerationSeconds: 30
      - key: node.kubernetes.io/unreachable
        effect: NoExecute
        tolerationSeconds: 30
      
      initContainers:
      # Kernel compatibility checker
      - name: kernel-check
        image: busybox:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          KERNEL_VERSION=$(uname -r)
          MAJOR=$(echo $KERNEL_VERSION | cut -d. -f1)
          MINOR=$(echo $KERNEL_VERSION | cut -d. -f2)
          
          echo "Kernel version: $KERNEL_VERSION (Major: $MAJOR, Minor: $MINOR)"
          
          if [ "$MAJOR" -lt 4 ] || ([ "$MAJOR" -eq 4 ] && [ "$MINOR" -lt 18 ]); then
            echo "WARNING: Kernel version $KERNEL_VERSION may not support all eBPF features. Minimum recommended: 4.18"
          else
            echo "Kernel version $KERNEL_VERSION supports eBPF"
          fi
          
          # Check for eBPF support
          if [ ! -d "/sys/fs/bpf" ]; then
            echo "WARNING: BPF filesystem not mounted at /sys/fs/bpf"
          else
            echo "BPF filesystem mounted at /sys/fs/bpf"
          fi
          
          # Check for required kernel configs
          CONFIG_FILE="/boot/config-$(uname -r)"
          if [ -f "$CONFIG_FILE" ]; then
            echo "Checking kernel config..."
            REQUIRED_CONFIGS="CONFIG_BPF CONFIG_BPF_SYSCALL CONFIG_BPF_JIT"
            for config in $REQUIRED_CONFIGS; do
              if grep -q "^${config}=y" "$CONFIG_FILE"; then
                echo "✓ $config enabled"
              else
                echo "✗ $config not found or disabled"
              fi
            done
          else
            echo "Kernel config not available at $CONFIG_FILE"
          fi
          
          echo "Kernel compatibility check completed"
        securityContext:
          privileged: true
        volumeMounts:
        - name: boot
          mountPath: /boot
          readOnly: true
        - name: sys
          mountPath: /sys
          readOnly: true
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
      
      containers:
      # Real Go Tapio Collector
      - name: tapio-collector
        image: tapio-collector:v1.0
        imagePullPolicy: IfNotPresent
        
        # Override entrypoint to provide specific configuration
        command: ["./entrypoint.sh"]
        args:
        - "--config"
        - "/etc/tapio/config.yaml"
        - "--log-level"
        - "info"
        - "--metrics-addr"
        - ":9090"
        - "--health-addr"
        - ":8080"
        
        # Environment variables
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: CLUSTER_NAME
          value: "production-cluster"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://localhost:4317"
        - name: OTEL_SERVICE_NAME
          value: "tapio-collector-go"
        - name: OTEL_SERVICE_VERSION
          value: "v1.0.0"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=tapio-collector-go,service.version=v1.0.0,deployment.environment=production"
        # Additional Go-specific environment variables
        - name: GOMAXPROCS
          value: "2"
        - name: GOMEMLIMIT
          value: "400MiB"
        - name: GOGC
          value: "50"
        
        # Security context for eBPF (full privileges required)
        securityContext:
          privileged: true
          runAsUser: 0
          runAsGroup: 0
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - SYS_ADMIN      # Required for eBPF program loading
            - SYS_RESOURCE   # Required to remove memlock limit
            - NET_ADMIN      # Required for network operations
            - SYS_PTRACE     # Required for process tracing
            - DAC_OVERRIDE   # Required for file access
            - IPC_LOCK       # Required for memory locking
            - SYS_RAWIO      # Required for raw socket operations
            - NET_RAW        # Required for raw network access
        
        # Resource limits (more generous for Go binary)
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 256Mi
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Volume mounts (same as simulator for compatibility)
        volumeMounts:
        # eBPF filesystem
        - name: bpf
          mountPath: /sys/fs/bpf
        
        # System directories (required for eBPF)
        - name: sys
          mountPath: /sys
          readOnly: true
        - name: proc
          mountPath: /proc
          readOnly: true
        - name: boot
          mountPath: /boot
          readOnly: true
        - name: modules
          mountPath: /lib/modules
          readOnly: true
        - name: usr-src
          mountPath: /usr/src
          readOnly: true
        
        # Cgroup filesystem
        - name: cgroup
          mountPath: /sys/fs/cgroup
        
        # Container runtime socket
        - name: docker-sock
          mountPath: /var/run/docker.sock
        
        # Configuration
        - name: config
          mountPath: /etc/tapio
          readOnly: true
        
        # Temporary directory for eBPF objects
        - name: tmp
          mountPath: /tmp
        
        # Log directory
        - name: varlog
          mountPath: /var/log/tapio
      
      # OTEL Collector sidecar (same as simulator version)
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.96.0
        imagePullPolicy: IfNotPresent
        
        command: ["/otelcol-contrib"]
        args:
        - --config=/etc/otelcol-contrib/config.yaml
        
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        securityContext:
          runAsUser: 10001
          runAsGroup: 10001
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        
        ports:
        - name: otlp-grpc
          containerPort: 4317
          protocol: TCP
        - name: otlp-http
          containerPort: 4318
          protocol: TCP
        - name: metrics
          containerPort: 8888
          protocol: TCP
        
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 15
          periodSeconds: 20
        
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 5
          periodSeconds: 10
        
        volumeMounts:
        - name: otel-config
          mountPath: /etc/otelcol-contrib
          readOnly: true
        - name: otel-tmp
          mountPath: /tmp
      
      # Volumes (same as simulator version)
      volumes:
      # Host filesystem access for eBPF
      - name: bpf
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      
      - name: sys
        hostPath:
          path: /sys
          type: Directory
      
      - name: proc
        hostPath:
          path: /proc
          type: Directory
      
      - name: boot
        hostPath:
          path: /boot
          type: Directory
      
      - name: modules
        hostPath:
          path: /lib/modules
          type: Directory
      
      - name: usr-src
        hostPath:
          path: /usr/src
          type: DirectoryOrCreate
      
      - name: cgroup
        hostPath:
          path: /sys/fs/cgroup
          type: Directory
      
      # Container runtime socket
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      
      # Configuration volumes
      - name: config
        configMap:
          name: tapio-collector-config
          defaultMode: 0644
      
      - name: otel-config
        configMap:
          name: tapio-otel-node-config
          defaultMode: 0644
      
      # Temporary volumes
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      
      - name: otel-tmp
        emptyDir:
          sizeLimit: 512Mi
      
      # Log volume
      - name: varlog
        hostPath:
          path: /var/log/tapio
          type: DirectoryOrCreate
      
      # Termination settings
      terminationGracePeriodSeconds: 30
  
  # Update strategy
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
---
# Service for Go collector metrics (separate from simulator)
apiVersion: v1
kind: Service
metadata:
  name: tapio-collector-go-metrics
  namespace: tapio-system
  labels:
    app.kubernetes.io/name: tapio-collector
    app.kubernetes.io/component: collector-go
    app.kubernetes.io/part-of: tapio
spec:
  clusterIP: None  # Headless service for DaemonSet
  selector:
    app.kubernetes.io/name: tapio-collector
    app.kubernetes.io/component: collector-go
  ports:
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: health
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: otlp-grpc
    port: 4317
    targetPort: 4317
    protocol: TCP
  - name: otlp-http
    port: 4318
    targetPort: 4318
    protocol: TCP