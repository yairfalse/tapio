{{- $collectorEnabled := .Values.collector.enabled -}}
{{- $otelEnabled := .Values.otelCollector.enabled -}}
{{- $monitoringEnabled := .Values.monitoring.enabled -}}

1. Get the collector status by running these commands:
{{- if $collectorEnabled }}
  kubectl get daemonset {{ .Values.collector.name }} -n {{ .Values.namespace.name }}
  kubectl get pods -l app.kubernetes.io/name={{ .Values.collector.name }} -n {{ .Values.namespace.name }}
{{- end }}

2. Check the OTEL collector status:
{{- if $otelEnabled }}
  kubectl get deployment {{ .Values.otelCollector.centralized.name }} -n {{ .Values.namespace.name }}
  kubectl get pods -l app.kubernetes.io/name={{ .Values.otelCollector.centralized.name }} -n {{ .Values.namespace.name }}
{{- end }}

3. Access the collector metrics:
{{- if $collectorEnabled }}
  kubectl port-forward -n {{ .Values.namespace.name }} daemonset/{{ .Values.collector.name }} 9090:9090
  
  Then access metrics at: http://localhost:9090/metrics
{{- end }}

4. Access the OTEL collector UI:
{{- if $otelEnabled }}
  kubectl port-forward -n {{ .Values.namespace.name }} deployment/{{ .Values.otelCollector.centralized.name }} 55679:55679
  
  Then access zPages at: http://localhost:55679/debug/tracez
{{- end }}

5. Check collector logs:
{{- if $collectorEnabled }}
  kubectl logs -f -n {{ .Values.namespace.name }} daemonset/{{ .Values.collector.name }}
{{- end }}

6. Monitor system health:
{{- if $monitoringEnabled }}
  # Check Prometheus alerts
  kubectl get prometheusrules -n {{ .Values.namespace.name }}
  
  # Check ServiceMonitors
  kubectl get servicemonitors -n {{ .Values.namespace.name }}
{{- end }}

7. Troubleshooting:
   
   a) Check eBPF program status:
      kubectl exec -n {{ .Values.namespace.name }} daemonset/{{ .Values.collector.name }} -- ls -la /sys/fs/bpf/
   
   b) Check kernel compatibility:
      kubectl logs -n {{ .Values.namespace.name }} daemonset/{{ .Values.collector.name }} -c kernel-check
   
   c) Check network policies:
      kubectl get networkpolicies -n {{ .Values.namespace.name }}
   
   d) Check RBAC permissions:
      kubectl auth can-i --list --as=system:serviceaccount:{{ .Values.namespace.name }}:{{ .Values.rbac.serviceAccounts.collector.name }}

8. Configuration:
   
   The collector configuration can be updated in the ConfigMap:
   kubectl get configmap {{ .Values.collector.name }}-config -n {{ .Values.namespace.name }} -o yaml
   
   To reload configuration:
   kubectl rollout restart daemonset/{{ .Values.collector.name }} -n {{ .Values.namespace.name }}

9. Scaling:
   
   OTEL Collector can be scaled using HPA:
   kubectl get hpa -n {{ .Values.namespace.name }}
   
   Manual scaling:
   kubectl scale deployment {{ .Values.otelCollector.centralized.name }} --replicas=5 -n {{ .Values.namespace.name }}

10. Security:
    
    Check Pod Security Standards:
    kubectl get podsecuritypolicy,podsecuritystandards -n {{ .Values.namespace.name }}
    
    Check running pods with privileged access:
    kubectl get pods -n {{ .Values.namespace.name }} -o jsonpath='{range .items[*]}{.metadata.name}: {.spec.securityContext.privileged}{"\n"}{end}'

{{- if .Values.testing.enabled }}
11. Testing:
    
    Run integration tests:
    kubectl get jobs -n {{ .Values.namespace.name }} -l app.kubernetes.io/component=test
    
{{- if .Values.testing.chaosEngineering.enabled }}
    Check chaos experiments:
    kubectl get chaosengines -n {{ .Values.namespace.name }}
{{- end }}
{{- end }}

==============================================================================
üöÄ Tapio eBPF Observability Platform Successfully Deployed!
==============================================================================

üìä Monitoring Dashboard: 
{{- if $monitoringEnabled }}
   Access your Grafana dashboard to view collector metrics and system health.
{{- else }}
   Enable monitoring.enabled=true for dashboard access.
{{- end }}

üîç Trace Analysis:
   Traces are being collected and exported to your configured backends.
   
‚ö° Performance:
   - Collectors are running with eBPF programs loaded on {{ .Values.global.clusterName }}
   - Event sampling rates are configured for optimal performance
   - Circuit breakers are {{ if .Values.collector.config.resources.enableCircuitBreaker }}enabled{{ else }}disabled{{ end }}

üîí Security:
   - Privileged containers are running with necessary eBPF capabilities
   - Network policies are {{ if .Values.security.networkPolicies.enabled }}enabled{{ else }}disabled{{ end }}
   - Pod Security Standards: {{ .Values.security.podSecurityStandards.enforce }}

üìù Documentation: https://docs.tapio.io
üêõ Issues: https://github.com/yairfalse/tapio/issues
üí¨ Support: https://tapio.io/support

For production deployment checklist, run:
kubectl get configmap tapio-production-checklist -n {{ .Values.namespace.name }} -o jsonpath='{.data.checklist\.md}' | head -50